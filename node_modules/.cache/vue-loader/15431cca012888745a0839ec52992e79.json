{"remainingRequest":"D:\\vue\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\vue\\src\\views\\zbtest\\zxtb.vue?vue&type=style&index=0&id=d546ba92&scoped=true&lang=css&","dependencies":[{"path":"D:\\vue\\src\\views\\zbtest\\zxtb.vue","mtime":1615948822838},{"path":"D:\\vue\\node_modules\\@vue\\cli-service\\node_modules\\css-loader\\dist\\cjs.js","mtime":1615952641773},{"path":"D:\\vue\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1615952643260},{"path":"D:\\vue\\node_modules\\postcss-loader\\src\\index.js","mtime":1615952643158},{"path":"D:\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1615952641464},{"path":"D:\\vue\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1615952643260}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgpAaW1wb3J0ICd+QGFzc2V0cy9sZXNzL2NvbW1vbi5sZXNzJzsK"},{"version":3,"sources":["zxtb.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkbA","file":"zxtb.vue","sourceRoot":"src/views/zbtest","sourcesContent":["<template>\n  <a-card :bordered=\"false\" v-if=\"columns\">\n    <!-- 查询区域 -->\n    <div class=\"table-page-search-wrapper\">\n      <a-form layout=\"inline\" @keyup.enter.native=\"searchQuery\">\n        <a-row :gutter=\"24\">\n          <a-col :xl=\"3\" :lg=\"6\" :md=\"8\" :sm=\"24\">\n            <a-form-item label=\"席位\">\n              <!-- <j-input placeholder=\"请输入名称模糊查询\" v-model=\"queryParam.name\"></j-input> -->\n              {{ userInfo.departName }}\n            </a-form-item>\n          </a-col>\n          <a-col :xl=\"3\" :lg=\"6\" :md=\"8\" :sm=\"24\">\n            <a-form-item label=\"报告人\">\n              <!-- <a-input placeholder=\"请输入名称查询\" v-model=\"queryParam.age\"></a-input>-->\n              <!-- <a-input placeholder=\"最小年龄\" type=\"ge\" v-model=\"queryParam.age_begin\" style=\"width:calc(50% - 15px);\"></a-input>\n              <span class=\"group-query-strig\">~</span>\n              <a-input placeholder=\"最大年龄\" type=\"le\" v-model=\"queryParam.age_end\" style=\"width:calc(50% - 15px);\"></a-input> -->\n              {{ userInfo.realName }}\n            </a-form-item>\n          </a-col>\n          <a-col :xl=\"6\" :lg=\"6\" :md=\"8\" :sm=\"24\">\n            <a-form-item label=\"报告日期\">\n              <a-date-picker v-model=\"formData.createTime\"\n                             :disabled=\"dateDisable\"\n                             format=\"YYYY-MM-DD\"\n                             @change=\"onChange\"\n              />\n            </a-form-item>\n          </a-col>\n          <a-col :xl=\"6\" :lg=\"6\" :md=\"8\" :sm=\"24\">\n            <a-form-item label=\"采报类型\">\n              <j-dict-select-tag @input=\"changeType\" v-model=\"formData.type\" :moren=\"false\" placeholder=\"请选择采报类型\"\n                                 dictCode=\"ReportType\"/>\n\n            </a-form-item>\n          </a-col>\n          <a-col :xl=\"6\" :lg=\"6\" :md=\"8\" :sm=\"24\">\n            <a-form-item label=\"采报模型\">\n              <a-select @change=\"templateChange\" v-model=\"formData.template\" :disabled=\"istype\"\n                        placeholder=\"请选择采报模型\">\n                <a-select-option :value=\"item.headId\" :key=\"index\" v-for=\"(item,index) in templateList\">\n                  {{ item.headName }}\n                </a-select-option>\n              </a-select>\n            </a-form-item>\n          </a-col>\n          <!-- <span style=\"float: left;overflow: hidden;\" class=\"table-page-search-submitButtons\">\n            <a-col :xl=\"4\" :lg=\"6\" :md=\"8\" :sm=\"24\">\n              <a-button type=\"primary\" @click=\"searchQuery\" icon=\"search\">查询</a-button>\n              <a-button type=\"primary\" @click=\"searchReset\" icon=\"reload\" style=\"margin-left: 8px\">重置</a-button>\n            </a-col>\n          </span> -->\n        </a-row>\n      </a-form>\n    </div>\n    <j-demo ref=\"zxcb\" v-if=\"jdemoshow\" :formData=\"formData\" :columns=\"columns\" :importBtn=\"importBtn\"\n            :dataSource=\"dataSource\"></j-demo>\n    <a-tabs default-active-key=\"0\" @change=\"callback\" >\n      <a-tab-pane :key=\"index\" :tab=\"item.name\" v-for=\"(item,index) in columnss\" :forceRender=\"true\" v-if=\"!jdemoshow\">\n        <j-demo :columns=\"item.columns\"  :importBtn=\"true\" :ref=\"'ref'+index\" @loadDataUpload=\"loadDataUpload\"\n                @getDatas=\"getDatas\" :formData=\"formData\" :dataSource=\"item.dataSource\"></j-demo>\n      </a-tab-pane>\n    </a-tabs>\n  </a-card>\n</template>\n\n<script>\nimport {\n  initDictOptions,\n  filterDictText,\n  filterDictTextByCache\n} from '@/components/dict/JDictSelectUtil'\nimport {JeecgListMixin} from '@/mixins/JeecgListMixin'\nimport Vue from 'vue'\nimport {filterObj} from '@/utils/util';\nimport JDemo from './JDemo.vue';\nimport UploadDemo from './uploadDemo.vue';\nimport {getAction,postAction} from \"@api/manage\";\nimport {JVXETypes} from \"@comp/jeecg/JVxeTable\";\nimport {JEditableTableMixin} from '@/mixins/JEditableTableMixin'\nimport {FormTypes, getRefPromise} from '@/utils/JEditableTableUtil'\n\nexport default {\n  name: \"JeecgDemoList\",\n  mixins: [JeecgListMixin, JEditableTableMixin],\n  components: {\n    JDemo,\n    UploadDemo\n  },\n  watch: {\n    \"columnss\": {\n      handler: function (val, oldVal) {\n        this.columnss = val\n      },\n      deep: true\n    }\n  },\n  data() {\n    return {\n      importBtn:false,\n      disableMixinCreated: true,\n      // 模板列表\n      jdemoshow: false,\n      templateList: [],\n      istype: true,\n      // 选择区域\n      formData: {\n        createTime: '',//时间\n        type: 'SynthesizeLogging',//采报类型\n        template: ''//模板\n      },\n\n      typeoption: [{\n        name: '综合日志',\n        value: 0\n      }, {\n        name: '执勤数据',\n        value: 1\n      }, {\n        name: '执勤报文',\n        value: 2\n      }, {\n        name: '军委填报表',\n        value: 3\n      }, {\n        name: '军委系统表',\n        value: 4\n      }],\n      stypeoption: [{\n        name: '模型一',\n        value: 0\n      }, {\n        name: '模型二',\n        value: 1\n      }, {\n        name: '模型三',\n        value: 2\n      }, {\n        name: '模型四',\n        value: 3\n      }, {\n        name: '模型五',\n        value: 4\n      }],\n      //列定义\n      url: {\n        list: \"/southTable/queryTableData\", //数据\n        structure: '/southTable/queryTableStructure',//结构\n        delete: \"/test/jeecgDemo/delete\",\n        deleteBatch: \"/test/jeecgDemo/deleteBatch\",\n        exportXlsUrl: \"/test/jeecgDemo/exportXls\",\n        templateUrl: '/reportFormModel/queryAllModel',\n        userInfo: '/southTable/queryUserInfo',//基本信息\n        save: '/southTable/reportFromDataSave'\n      },\n      isshowlist: true,\n      // 数据源，控制表格的数据\n      dataSource: [],\n      // 列配置，控制表格显示的列\n      columns: [],\n      columnss: [],\n      userInfo: null,\n      refKeys: ['ref0', 'ref1'],\n      dateDisable:false,\n    }\n  },\n  methods: {\n    loadDataUpload(arr) {\n      this.jdemoshow = true\n      for (var i = 0; i < arr.length; i++) {\n        this.columnss[i].dataSource = arr[i]\n      }\n\n      this.jdemoshow = false\n    },\n    getDatas() {\n      this.getDatass().then(tables => {\n        var arr = []\n        console.log(tables)\n        for(var i = 0 ; i < tables.length;i++) {\n          arr.push(tables[i][0].validAllEvent())\n        }\n        for(var i = 0 ;i< arr.length;i++) {\n          for(var j  =0;j< arr[i].length;j++) {\n            if(arr[i][j].parent_id) {\n              var id = arr[i][j].parent_id\n            }else {\n              var id = ''\n            }\n          }\n        }\n        let object = {\n          id:\"id\",\n          list:[[],[]]\n        }\n         var obj = {\n              templateType: this.formData.template,\n              reportFromType: this.formData.type,\n              list:arr,\n              id\n            }\n            // 【模拟保存】\n            this.loading = true\n            postAction(this.url.save, obj).then(res => {\n              if (res.success) {\n                this.$message.success(`保存成功！`)\n              } else {\n                this.$message.warn(`保存失败：` + res.message)\n              }\n            }).finally(() => {\n              this.loading = false\n            })\n      })\n    },\n    getDatass() {\n      var arr = ['ref0', 'ref1']\n      let values = arr.map(key => getRefPromise(this, key))\n      return Promise.all(values)\n    }\n    ,\n    callback() {\n    }\n    ,\n    // 获取模板类型\n    getTemplateList() {\n      var formData = {}\n      getAction(this.url.templateUrl, formData).then(res => {\n        if (res.success) {\n          // 将查询的数据赋值给 dataSource\n          this.templateList = res.result\n          // 重置选择\n        } else {\n          this.$error({title: '主表查询失败', content: res.message})\n        }\n      }).finally(() => {\n        // 这里是无论成功或失败都会执行的方法，在这里关闭loading\n        this.loading = false\n      })\n      getAction(this.url.userInfo, formData).then(res => {\n        if (res.success) {\n          // 将查询的数据赋值给 dataSource\n          this.userInfo = res.result\n          // 重置选择\n        } else {\n          this.$error({title: '主表查询失败', content: res.message})\n        }\n      }).finally(() => {\n        // 这里是无论成功或失败都会执行的方法，在这里关闭loading\n        this.loading = false\n      })\n    }\n    ,\n    // 选择日期的回调\n    onChange(date, dateString) {\n      this.formData.createTime = dateString\n      var e = this.formData.type\n      window.localStorage.setItem('formData', JSON.stringify(this.formData))\n      if (e == 'SynthesizeLogging') {\n        this.loadData()\n      } else if (e == 'DutyData') {\n      } else if (e == 'WeekStatistics') {\n\n      }\n    }\n    ,\n    // 选择类型\n    changeType(e) {\n      this.jdemoshow = false\n      var date = new Date();\n      var seperator1 = \"-\";\n      var year = date.getFullYear();\n      var month = date.getMonth() + 1;\n      var strDate = date.getDate();\n      if (month >= 1 && month <= 9) {\n        month = \"0\" + month;\n      }\n      if (strDate >= 0 && strDate <= 9) {\n        strDate = \"0\" + strDate;\n      }\n      var currentdate = year + seperator1 + month + seperator1 + strDate;\n      console.log(e)\n      if (e == 'SynthesizeLogging') {\n        this.istype = true\n        this.formData.template = ''\n        this.dateDisable = false\n        this.importBtn = false\n      } else if (e == 'DutyData') {\n        this.formData.template = this.templateList[0].headId\n        this.istype = false\n        this.formData.createTime = currentdate\n        this.dateDisable = true\n      } else if (e == 'WeekStatistics') {\n        this.formData.template = ''\n        this.istype = true\n        this.formData.createTime = currentdate\n        this.dateDisable = true\n        this.importBtn = true\n\n      }\n      window.localStorage.setItem('formData', JSON.stringify(this.formData))\n      this.getStructure()\n      this.loadData()\n    }\n    ,\n    // 选择模板\n    templateChange(e) {\n      this.jdemoshow = true\n      window.localStorage.setItem('formData', JSON.stringify(this.formData))\n      this.getStructure()\n      // 发送请求头部，请求数据的请求\n    }\n    ,\n    changeUploadMethod(e) {\n      console.log(e)\n    }\n    ,\n    // 查询结构（table的头部）\n    getStructure() {\n      // 封装查询条件\n      let formData = {\n        reportFromType: this.formData.type,\n        templateType: this.formData.template\n      }\n      // 调用查询数据接口\n      this.loading = true\n      getAction(this.url.structure, formData).then(res => {\n        if (res.success) {\n          if (this.formData.type != 'DutyData') {\n            var result = res.result\n            // 将查询的数据赋值给 dataSource\n            var arr = []\n            for (var i = 0; i < result.length; i++) {\n              if (result[i].isShowForm == 1) {\n                arr.push({\n                  key: result[i].dbFieldName,\n                  title: result[i].dbFieldTxt,\n                  type: JVXETypes[result[i].fieldShowType],\n                  defaultValue: result[i].fieldDefaultValue\n                })\n              }\n            }\n            this.jdemoshow = true\n            this.columns = arr\n            this.columnss = []\n          } else {//执勤数据\n            var result = res.result\n            var columns = []\n            for (var i = 0; i < result.length; i++) {\n              var arr = []\n              var obj = {\n                name: result[i].sheetName,\n                dataSource:[]\n              }\n              var results = result[i].fields\n              for (var j = 0; j < results.length; j++) {\n                if (results[j].isShowForm == 1) {\n                  arr.push({\n                    key: results[j].dbFieldName,\n                    title: results[j].dbFieldTxt,\n                    type: JVXETypes[results[j].fieldShowType],\n                    defaultValue: results[j].fieldDefaultValue\n                  })\n                }\n              }\n              obj.columns = arr\n              columns.push(obj)\n            }\n              this.columnss = columns\n              this.jdemoshow = false\n          }\n        } else {\n          this.$error({title: '主表查询失败', content: res.message})\n        }\n      }).finally(() => {\n        // 这里是无论成功或失败都会执行的方法，在这里关闭loading\n        this.loading = false\n      })\n    }\n    ,\n    // 查询数据\n    loadData() {\n      // 封装查询条件\n      let formData = {\n        createTime: this.formData.createTime\n      }\n      // 调用查询数据接口\n      this.loading = true\n      if (this.formData.type == 'SynthesizeLogging') {\n        getAction(this.url.list, formData).then(res => {\n          if (res.success) {\n            // 将查询的数据赋值给 dataSource\n            this.dataSource = res.result\n            // 重置选择\n            this.selectedRows = []\n          } else {\n            this.$error({title: '主表查询失败', content: res.message})\n          }\n        }).finally(() => {\n          // 这里是无论成功或失败都会执行的方法，在这里关闭loading\n          this.loading = false\n        })\n      } else {\n        this.dataSource = []\n      }\n    }\n  },\n  created() {\n    var date = new Date();\n    var seperator1 = \"-\";\n    var year = date.getFullYear();\n    var month = date.getMonth() + 1;\n    var strDate = date.getDate();\n    if (month >= 1 && month <= 9) {\n      month = \"0\" + month;\n    }\n    if (strDate >= 0 && strDate <= 9) {\n      strDate = \"0\" + strDate;\n    }\n    var currentdate = year + seperator1 + month + seperator1 + strDate;\n    this.formData.createTime = currentdate\n  },\n  mounted() {\n    // 获取头部数据\n    this.getStructure()\n    // 获取数据（list）\n    this.loadData()\n    // 获取模板列表\n    this.getTemplateList()\n    window.localStorage.setItem('formData', JSON.stringify(this.formData))\n  }\n}\n</script>\n<style scoped>\n@import '~@assets/less/common.less';\n</style>"]}]}