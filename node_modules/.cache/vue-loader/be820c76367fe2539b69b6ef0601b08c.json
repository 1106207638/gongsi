{"remainingRequest":"D:\\vue\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\vue\\src\\components\\jeecgbiz\\modal\\JSelectDepartModal.vue?vue&type=style&index=0&id=7d78fd02&lang=less&scoped=true&","dependencies":[{"path":"D:\\vue\\src\\components\\jeecgbiz\\modal\\JSelectDepartModal.vue","mtime":1615948816020},{"path":"D:\\vue\\node_modules\\@vue\\cli-service\\node_modules\\css-loader\\dist\\cjs.js","mtime":1615952641773},{"path":"D:\\vue\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1615952643260},{"path":"D:\\vue\\node_modules\\postcss-loader\\src\\index.js","mtime":1615952643158},{"path":"D:\\vue\\node_modules\\less-loader\\dist\\cjs.js","mtime":1615952670554},{"path":"D:\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1615952641464},{"path":"D:\\vue\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1615952643260}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi8vIOmZkOWItumDqOmXqOmAieaLqeagkemrmOW6pu+8jOmBv+WFjemDqOmXqOWkquWkmuaXtueCueWHu+ehruWumuS4jeS+vwoubXktZGVwdC1zZWxlY3QtdHJlZXsKICBoZWlnaHQ6IDM1MHB4OwogIG92ZXJmbG93LXk6IHNjcm9sbDsKfQoK"},{"version":3,"sources":["JSelectDepartModal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiPA;AACA;AACA;AACA;AACA","file":"JSelectDepartModal.vue","sourceRoot":"src/components/jeecgbiz/modal","sourcesContent":["<template>\r\n  <j-modal\r\n    title=\"选择部门\"\r\n    :width=\"modalWidth\"\r\n    :visible=\"visible\"\r\n    :confirmLoading=\"confirmLoading\"\r\n    @ok=\"handleSubmit\"\r\n    @cancel=\"handleCancel\"\r\n    switchFullscreen\r\n    cancelText=\"关闭\">\r\n    <a-spin tip=\"Loading...\" :spinning=\"false\">\r\n      <a-input-search style=\"margin-bottom: 1px\" placeholder=\"请输入部门名称按回车进行搜索\" @search=\"onSearch\" />\r\n      <a-tree\r\n        checkable\r\n        class=\"my-dept-select-tree\"\r\n        :treeData=\"treeData\"\r\n        :checkStrictly=\"true\"\r\n        @check=\"onCheck\"\r\n        @select=\"onSelect\"\r\n        @expand=\"onExpand\"\r\n        :autoExpandParent=\"autoExpandParent\"\r\n        :expandedKeys=\"expandedKeys\"\r\n        :checkedKeys=\"checkedKeys\">\r\n\r\n        <template slot=\"title\" slot-scope=\"{title}\">\r\n          <span v-if=\"title.indexOf(searchValue) > -1\">\r\n            {{title.substr(0, title.indexOf(searchValue))}}\r\n            <span style=\"color: #f50\">{{searchValue}}</span>\r\n            {{title.substr(title.indexOf(searchValue) + searchValue.length)}}\r\n          </span>\r\n          <span v-else>{{title}}</span>\r\n        </template>\r\n      </a-tree>\r\n\r\n    </a-spin>\r\n  </j-modal>\r\n</template>\r\n\r\n<script>\r\n  import { queryDepartTreeList } from '@/api/api'\r\n  export default {\r\n    name: 'JSelectDepartModal',\r\n    props:['modalWidth','multi','rootOpened','departId'],\r\n    data(){\r\n      return {\r\n        visible:false,\r\n        confirmLoading:false,\r\n        treeData:[],\r\n        autoExpandParent:true,\r\n        expandedKeys:[],\r\n        dataList:[],\r\n        checkedKeys:[],\r\n        checkedRows:[],\r\n        searchValue:\"\"\r\n      }\r\n    },\r\n    created(){\r\n      this.loadDepart();\r\n    },\r\n    watch:{\r\n      departId(){\r\n        this.initDepartComponent()\r\n      },\r\n      visible: {\r\n        handler() {\r\n          if (this.departId) {\r\n            this.checkedKeys = this.departId.split(\",\");\r\n            // console.log('this.departId', this.departId)\r\n          } else {\r\n            this.checkedKeys = [];\r\n          }\r\n        }\r\n      }\r\n    },\r\n    methods:{\r\n      show(){\r\n        this.visible=true\r\n        this.checkedRows=[]\r\n        this.checkedKeys=[]\r\n      },\r\n      loadDepart(){\r\n        queryDepartTreeList().then(res=>{\r\n          if(res.success){\r\n            let arr = [...res.result]\r\n            this.reWriterWithSlot(arr)\r\n            this.treeData = arr\r\n            this.initDepartComponent()\r\n            if(this.rootOpened){\r\n              this.initExpandedKeys(res.result)\r\n            }\r\n          }\r\n        })\r\n      },\r\n      initDepartComponent(){\r\n        let names = ''\r\n        if(this.departId){\r\n          let currDepartId = this.departId\r\n          for(let item of this.dataList){\r\n            if(currDepartId.indexOf(item.key)>=0){\r\n              names+=\",\"+item.title\r\n            }\r\n          }\r\n          if(names){\r\n            names = names.substring(1)\r\n          }\r\n        }\r\n        this.$emit(\"initComp\",names)\r\n      },\r\n      reWriterWithSlot(arr){\r\n        for(let item of arr){\r\n          if(item.children && item.children.length>0){\r\n            this.reWriterWithSlot(item.children)\r\n            let temp = Object.assign({},item)\r\n            temp.children = {}\r\n            this.dataList.push(temp)\r\n          }else{\r\n            this.dataList.push(item)\r\n            item.scopedSlots={ title: 'title' }\r\n          }\r\n        }\r\n      },\r\n      initExpandedKeys(arr){\r\n        if(arr && arr.length>0){\r\n          let keys = []\r\n          for(let item of arr){\r\n            if(item.children && item.children.length>0){\r\n              keys.push(item.id)\r\n            }\r\n          }\r\n          this.expandedKeys=[...keys]\r\n        }else{\r\n          this.expandedKeys=[]\r\n        }\r\n      },\r\n      onCheck (checkedKeys,info) {\r\n        if(!this.multi){\r\n          let arr = checkedKeys.checked.filter(item => this.checkedKeys.indexOf(item) < 0)\r\n          this.checkedKeys = [...arr]\r\n          this.checkedRows = (this.checkedKeys.length === 0) ? [] : [info.node.dataRef]\r\n        }else{\r\n          this.checkedKeys = checkedKeys.checked\r\n          this.checkedRows = this.getCheckedRows(this.checkedKeys)\r\n        }\r\n      },\r\n      onSelect(selectedKeys,info) {\r\n        let keys = []\r\n        keys.push(selectedKeys[0])\r\n        if(!this.checkedKeys || this.checkedKeys.length===0 || !this.multi){\r\n          this.checkedKeys = [...keys]\r\n          this.checkedRows=[info.node.dataRef]\r\n        }else{\r\n          let currKey = info.node.dataRef.key\r\n          if(this.checkedKeys.indexOf(currKey)>=0){\r\n            this.checkedKeys = this.checkedKeys.filter(item=> item !==currKey)\r\n          }else{\r\n            this.checkedKeys.push(...keys)\r\n          }\r\n        }\r\n        this.checkedRows = this.getCheckedRows(this.checkedKeys)\r\n      },\r\n      onExpand (expandedKeys) {\r\n        this.expandedKeys = expandedKeys\r\n        this.autoExpandParent = false\r\n      },\r\n      handleSubmit(){\r\n        if(!this.checkedKeys || this.checkedKeys.length==0){\r\n          this.$emit(\"ok\",'')\r\n        }else{\r\n          this.$emit(\"ok\",this.checkedRows,this.checkedKeys.join(\",\"))\r\n        }\r\n        this.handleClear()\r\n      },\r\n      handleCancel(){\r\n        this.handleClear()\r\n      },\r\n      handleClear(){\r\n        this.visible=false\r\n        this.checkedKeys=[]\r\n      },\r\n      getParentKey(currKey,treeData){\r\n        let parentKey\r\n        for (let i = 0; i < treeData.length; i++) {\r\n          const node = treeData[i]\r\n          if (node.children) {\r\n            if (node.children.some(item => item.key === currKey)) {\r\n              parentKey = node.key\r\n            } else if (this.getParentKey(currKey, node.children)) {\r\n              parentKey = this.getParentKey(currKey, node.children)\r\n            }\r\n          }\r\n        }\r\n        return parentKey\r\n      },\r\n      onSearch(value){\r\n        const expandedKeys = this.dataList.map((item) => {\r\n          if (item.title.indexOf(value) > -1) {\r\n            return this.getParentKey(item.key,this.treeData)\r\n          }\r\n          return null\r\n        }).filter((item, i, self) => item && self.indexOf(item) === i)\r\n\r\n        Object.assign(this, {\r\n          expandedKeys,\r\n          searchValue: value,\r\n          autoExpandParent: true,\r\n        })\r\n\r\n\r\n      },\r\n      // 根据 checkedKeys 获取 rows\r\n      getCheckedRows(checkedKeys) {\r\n        const forChildren = (list, key) => {\r\n          for (let item of list) {\r\n            if (item.id === key) {\r\n              return item\r\n            }\r\n            if (item.children instanceof Array) {\r\n              let value = forChildren(item.children, key)\r\n              if (value != null) {\r\n                return value\r\n              }\r\n            }\r\n          }\r\n          return null\r\n        }\r\n\r\n        let rows = []\r\n        for (let key of checkedKeys) {\r\n          let row = forChildren(this.treeData, key)\r\n          if (row != null) {\r\n            rows.push(row)\r\n          }\r\n        }\r\n        return rows\r\n      }\r\n    }\r\n  }\r\n\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n  // 限制部门选择树高度，避免部门太多时点击确定不便\r\n  .my-dept-select-tree{\r\n    height: 350px;\r\n    overflow-y: scroll;\r\n  }\r\n\r\n</style>"]}]}