{"remainingRequest":"D:\\vue\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\vue\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\vue\\src\\views\\jeecg\\ImagCropper.vue?vue&type=template&id=0a7f9e10&scoped=true&","dependencies":[{"path":"D:\\vue\\src\\views\\jeecg\\ImagCropper.vue","mtime":1615948819730},{"path":"D:\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1615952641464},{"path":"D:\\vue\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1615952643260},{"path":"D:\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1615952641464},{"path":"D:\\vue\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1615952643260}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}