{"remainingRequest":"D:\\vue\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\vue\\src\\views\\modules\\monitor\\SystemInfo.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\vue\\src\\views\\modules\\monitor\\SystemInfo.vue","mtime":1615948820454},{"path":"D:\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1615952641464},{"path":"D:\\vue\\node_modules\\babel-loader\\lib\\index.js","mtime":1615952610415},{"path":"D:\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1615952641464},{"path":"D:\\vue\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1615952643260}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JwppbXBvcnQgeyBnZXRBY3Rpb24gfSBmcm9tICdAL2FwaS9tYW5hZ2UnCgptb21lbnQubG9jYWxlKCd6aC1jbicpCgpleHBvcnQgZGVmYXVsdCB7CiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHRpbWU6ICcnLAogICAgICBsb2FkaW5nOiB0cnVlLAogICAgICB0YWJsZUxvYWRpbmc6IHRydWUsCiAgICAgIGNvbHVtbnM6IFt7CiAgICAgICAgdGl0bGU6ICflj4LmlbAnLAogICAgICAgIHdpZHRoOiAnMzAlJywKICAgICAgICBkYXRhSW5kZXg6ICdwYXJhbScsCiAgICAgICAgc2NvcGVkU2xvdHM6IHsgY3VzdG9tUmVuZGVyOiAncGFyYW0nIH0KICAgICAgfSwgewogICAgICAgIHRpdGxlOiAn5o+P6L+wJywKICAgICAgICB3aWR0aDogJzQwJScsCiAgICAgICAgZGF0YUluZGV4OiAndGV4dCcsCiAgICAgICAgc2NvcGVkU2xvdHM6IHsgY3VzdG9tUmVuZGVyOiAndGV4dCcgfQogICAgICB9LCB7CiAgICAgICAgdGl0bGU6ICflvZPliY3lgLwnLAogICAgICAgIHdpZHRoOiAnMzAlJywKICAgICAgICBkYXRhSW5kZXg6ICd2YWx1ZScsCiAgICAgICAgc2NvcGVkU2xvdHM6IHsgY3VzdG9tUmVuZGVyOiAndmFsdWUnIH0KICAgICAgfV0sCiAgICAgIGRhdGFTb3VyY2U6IFtdLAogICAgICAvLyDliJfooajpgJrov4cgdGV4dEluZm8g5riy5p+T5Ye66aKc6Imy44CB5o+P6L+w5ZKM5Y2V5L2NCiAgICAgIHRleHRJbmZvOiB7CiAgICAgICAgJ3N5c3RlbS5jcHUuY291bnQnOiB7IGNvbG9yOiAnZ3JlZW4nLCB0ZXh0OiAnQ1BVIOaVsOmHjycsIHVuaXQ6ICfmoLgnIH0sCiAgICAgICAgJ3N5c3RlbS5jcHUudXNhZ2UnOiB7IGNvbG9yOiAnZ3JlZW4nLCB0ZXh0OiAn57O757ufIENQVSDkvb/nlKjnjocnLCB1bml0OiAnJScgfSwKICAgICAgICAncHJvY2Vzcy5zdGFydC50aW1lJzogeyBjb2xvcjogJ3B1cnBsZScsIHRleHQ6ICflupTnlKjlkK/liqjml7bpl7TngrknLCB1bml0OiAnJyB9LAogICAgICAgICdwcm9jZXNzLnVwdGltZSc6IHsgY29sb3I6ICdwdXJwbGUnLCB0ZXh0OiAn5bqU55So5bey6L+Q6KGM5pe26Ze0JywgdW5pdDogJ+enkicgfSwKICAgICAgICAncHJvY2Vzcy5jcHUudXNhZ2UnOiB7IGNvbG9yOiAncHVycGxlJywgdGV4dDogJ+W9k+WJjeW6lOeUqCBDUFUg5L2/55So546HJywgdW5pdDogJyUnIH0KICAgICAgfSwKICAgICAgLy8g5b2T5LiA5p2h6K6w5b2V5Lit6ZyA6KaB5Y+W5Ye65aSa5p2h5pWw5o2u55qE5pe25YCZ6ZyA6KaB6YWN572u6K+l5a2X5q61CiAgICAgIG1vcmVJbmZvOiB7fQogICAgfQogIH0sCiAgbW91bnRlZCgpIHsKICAgIHRoaXMubG9hZFRvbWNhdEluZm8oKQogIH0sCiAgbWV0aG9kczogewoKICAgIGhhbmRsZUNsaWNrVXBkYXRlKCkgewogICAgICB0aGlzLmxvYWRUb21jYXRJbmZvKCkKICAgIH0sCgogICAgbG9hZFRvbWNhdEluZm8oKSB7CiAgICAgIHRoaXMudGFibGVMb2FkaW5nID0gdHJ1ZQogICAgICB0aGlzLnRpbWUgPSBtb21lbnQoKS5mb3JtYXQoJ1lZWVnlubRNTeaciERE5pelIEhI5pe2bW3liIZzc+enkicpCiAgICAgIFByb21pc2UuYWxsKFsKICAgICAgICBnZXRBY3Rpb24oJ2FjdHVhdG9yL21ldHJpY3Mvc3lzdGVtLmNwdS5jb3VudCcpLAogICAgICAgIGdldEFjdGlvbignYWN0dWF0b3IvbWV0cmljcy9zeXN0ZW0uY3B1LnVzYWdlJyksCiAgICAgICAgZ2V0QWN0aW9uKCdhY3R1YXRvci9tZXRyaWNzL3Byb2Nlc3Muc3RhcnQudGltZScpLAogICAgICAgIGdldEFjdGlvbignYWN0dWF0b3IvbWV0cmljcy9wcm9jZXNzLnVwdGltZScpLAogICAgICAgIGdldEFjdGlvbignYWN0dWF0b3IvbWV0cmljcy9wcm9jZXNzLmNwdS51c2FnZScpCiAgICAgIF0pLnRoZW4oKHJlcykgPT4gewogICAgICAgIGxldCBpbmZvID0gW10KICAgICAgICByZXMuZm9yRWFjaCgodmFsdWUsIGlkKSA9PiB7CiAgICAgICAgICBsZXQgbW9yZSA9IHRoaXMubW9yZUluZm9bdmFsdWUubmFtZV0KICAgICAgICAgIGlmICghKG1vcmUgaW5zdGFuY2VvZiBBcnJheSkpIHsKICAgICAgICAgICAgbW9yZSA9IFsnJ10KICAgICAgICAgIH0KICAgICAgICAgIG1vcmUuZm9yRWFjaCgoaXRlbSwgaWR4KSA9PiB7CiAgICAgICAgICAgIGxldCBwYXJhbSA9IHZhbHVlLm5hbWUgKyBpdGVtCiAgICAgICAgICAgIGxldCB2YWwgPSB2YWx1ZS5tZWFzdXJlbWVudHNbaWR4XS52YWx1ZQogICAgICAgICAgICBpZiAocGFyYW0gPT09ICdzeXN0ZW0uY3B1LnVzYWdlJyB8fCBwYXJhbSA9PT0gJ3Byb2Nlc3MuY3B1LnVzYWdlJykgewogICAgICAgICAgICAgIHZhbCA9IHRoaXMuY29udmVydCh2YWwsIE51bWJlcikKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAocGFyYW0gPT09ICdwcm9jZXNzLnN0YXJ0LnRpbWUnKSB7CiAgICAgICAgICAgICAgdmFsID0gdGhpcy5jb252ZXJ0KHZhbCwgRGF0ZSkKICAgICAgICAgICAgfQogICAgICAgICAgICBpbmZvLnB1c2goeyBpZDogcGFyYW0gKyBpZCwgcGFyYW0sIHRleHQ6ICdmYWxzZSB2YWx1ZScsIHZhbHVlOiB2YWwgfSkKICAgICAgICAgIH0pCiAgICAgICAgfSkKICAgICAgICB0aGlzLmRhdGFTb3VyY2UgPSBpbmZvCiAgICAgIH0pLmNhdGNoKChlKSA9PiB7CiAgICAgICAgY29uc29sZS5lcnJvcihlKQogICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IoJ+iOt+WPluacjeWKoeWZqOS/oeaBr+Wksei0pScpCiAgICAgIH0pLmZpbmFsbHkoKCkgPT4gewogICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlCiAgICAgICAgdGhpcy50YWJsZUxvYWRpbmcgPSBmYWxzZQogICAgICB9KQogICAgfSwKCiAgICBjb252ZXJ0KHZhbHVlLCB0eXBlKSB7CiAgICAgIGlmICh0eXBlID09PSBOdW1iZXIpIHsKICAgICAgICByZXR1cm4gTnVtYmVyKHZhbHVlICogMTAwKS50b0ZpeGVkKDIpCiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gRGF0ZSkgewogICAgICAgIHJldHVybiBtb21lbnQodmFsdWUgKiAxMDAwKS5mb3JtYXQoJ1lZWVktTU0tREQgSEg6bW06c3MnKQogICAgICB9CiAgICAgIHJldHVybiB2YWx1ZQogICAgfQogIH0KfQo="},{"version":3,"sources":["SystemInfo.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"SystemInfo.vue","sourceRoot":"src/views/modules/monitor","sourcesContent":["<template>\r\n  <a-skeleton active :loading=\"loading\" :paragraph=\"{rows: 17}\">\r\n    <a-card :bordered=\"false\">\r\n\r\n      <a-alert type=\"info\" :showIcon=\"true\">\r\n        <div slot=\"message\">\r\n          上次更新时间：{{ this.time }}\r\n          <a-divider type=\"vertical\"/>\r\n          <a @click=\"handleClickUpdate\">立即更新</a>\r\n        </div>\r\n      </a-alert>\r\n\r\n      <a-table\r\n        rowKey=\"id\"\r\n        size=\"middle\"\r\n        :columns=\"columns\"\r\n        :dataSource=\"dataSource\"\r\n        :pagination=\"false\"\r\n        :loading=\"tableLoading\"\r\n        style=\"margin-top: 20px;\">\r\n\r\n        <template slot=\"param\" slot-scope=\"text, record\">\r\n          <a-tag :color=\"textInfo[record.param].color\">{{ text }}</a-tag>\r\n        </template>\r\n\r\n        <template slot=\"text\" slot-scope=\"text, record\">\r\n          {{ textInfo[record.param].text }}\r\n        </template>\r\n\r\n        <template slot=\"value\" slot-scope=\"text, record\">\r\n          {{ text }} {{ textInfo[record.param].unit }}\r\n        </template>\r\n\r\n      </a-table>\r\n    </a-card>\r\n  </a-skeleton>\r\n</template>\r\n<script>\r\n  import moment from 'moment'\r\n  import { getAction } from '@/api/manage'\r\n\r\n  moment.locale('zh-cn')\r\n\r\n  export default {\r\n    data() {\r\n      return {\r\n        time: '',\r\n        loading: true,\r\n        tableLoading: true,\r\n        columns: [{\r\n          title: '参数',\r\n          width: '30%',\r\n          dataIndex: 'param',\r\n          scopedSlots: { customRender: 'param' }\r\n        }, {\r\n          title: '描述',\r\n          width: '40%',\r\n          dataIndex: 'text',\r\n          scopedSlots: { customRender: 'text' }\r\n        }, {\r\n          title: '当前值',\r\n          width: '30%',\r\n          dataIndex: 'value',\r\n          scopedSlots: { customRender: 'value' }\r\n        }],\r\n        dataSource: [],\r\n        // 列表通过 textInfo 渲染出颜色、描述和单位\r\n        textInfo: {\r\n          'system.cpu.count': { color: 'green', text: 'CPU 数量', unit: '核' },\r\n          'system.cpu.usage': { color: 'green', text: '系统 CPU 使用率', unit: '%' },\r\n          'process.start.time': { color: 'purple', text: '应用启动时间点', unit: '' },\r\n          'process.uptime': { color: 'purple', text: '应用已运行时间', unit: '秒' },\r\n          'process.cpu.usage': { color: 'purple', text: '当前应用 CPU 使用率', unit: '%' }\r\n        },\r\n        // 当一条记录中需要取出多条数据的时候需要配置该字段\r\n        moreInfo: {}\r\n      }\r\n    },\r\n    mounted() {\r\n      this.loadTomcatInfo()\r\n    },\r\n    methods: {\r\n\r\n      handleClickUpdate() {\r\n        this.loadTomcatInfo()\r\n      },\r\n\r\n      loadTomcatInfo() {\r\n        this.tableLoading = true\r\n        this.time = moment().format('YYYY年MM月DD日 HH时mm分ss秒')\r\n        Promise.all([\r\n          getAction('actuator/metrics/system.cpu.count'),\r\n          getAction('actuator/metrics/system.cpu.usage'),\r\n          getAction('actuator/metrics/process.start.time'),\r\n          getAction('actuator/metrics/process.uptime'),\r\n          getAction('actuator/metrics/process.cpu.usage')\r\n        ]).then((res) => {\r\n          let info = []\r\n          res.forEach((value, id) => {\r\n            let more = this.moreInfo[value.name]\r\n            if (!(more instanceof Array)) {\r\n              more = ['']\r\n            }\r\n            more.forEach((item, idx) => {\r\n              let param = value.name + item\r\n              let val = value.measurements[idx].value\r\n              if (param === 'system.cpu.usage' || param === 'process.cpu.usage') {\r\n                val = this.convert(val, Number)\r\n              }\r\n              if (param === 'process.start.time') {\r\n                val = this.convert(val, Date)\r\n              }\r\n              info.push({ id: param + id, param, text: 'false value', value: val })\r\n            })\r\n          })\r\n          this.dataSource = info\r\n        }).catch((e) => {\r\n          console.error(e)\r\n          this.$message.error('获取服务器信息失败')\r\n        }).finally(() => {\r\n          this.loading = false\r\n          this.tableLoading = false\r\n        })\r\n      },\r\n\r\n      convert(value, type) {\r\n        if (type === Number) {\r\n          return Number(value * 100).toFixed(2)\r\n        } else if (type === Date) {\r\n          return moment(value * 1000).format('YYYY-MM-DD HH:mm:ss')\r\n        }\r\n        return value\r\n      }\r\n    }\r\n  }\r\n</script>\r\n<style></style>\r\n"]}]}