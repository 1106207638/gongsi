{"remainingRequest":"D:\\vue\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\vue\\src\\components\\jeecg\\JTreeTable.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\vue\\src\\components\\jeecg\\JTreeTable.vue","mtime":1615948815753},{"path":"D:\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1615952641464},{"path":"D:\\vue\\node_modules\\babel-loader\\lib\\index.js","mtime":1615952610415},{"path":"D:\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1615952641464},{"path":"D:\\vue\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1615952643260}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IGdldEFjdGlvbiB9IGZyb20gJ0AvYXBpL21hbmFnZScKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnSlRyZWVUYWJsZScsCiAgcHJvcHM6IHsKICAgIHJvd0tleTogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6ICdpZCcKICAgIH0sCiAgICAvLyDmoLnmja7ku4DkuYjmn6Xor6LvvIzlpoLmnpzkvKDpgJIgaWQg5bCx5qC55o2uIGlkIOafpeivogogICAgcXVlcnlLZXk6IHsKICAgICAgdHlwZTogU3RyaW5nLAogICAgICBkZWZhdWx0OiAncGFyZW50SWQnCiAgICB9LAogICAgcXVlcnlQYXJhbXM6IHsKICAgICAgdHlwZTogT2JqZWN0LAogICAgICBkZWZhdWx0OiAoKSA9PiAoe30pCiAgICB9LAogICAgLy8g5p+l6K+i6aG257qn5pe255qE5YC877yM5aaC5p6c6aG257qn5Li6MO+8jOWImeS8oDAKICAgIHRvcFZhbHVlOiB7CiAgICAgIHR5cGU6IFN0cmluZywKICAgICAgZGVmYXVsdDogbnVsbAogICAgfSwKICAgIGNvbHVtbnM6IHsKICAgICAgdHlwZTogQXJyYXksCiAgICAgIHJlcXVpcmVkOiB0cnVlCiAgICB9LAogICAgdXJsOiB7CiAgICAgIHR5cGU6IFN0cmluZywKICAgICAgcmVxdWlyZWQ6IHRydWUKICAgIH0sCiAgICBjaGlsZHJlblVybDogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6IG51bGwKICAgIH0sCiAgICB0YWJsZVByb3BzOiB7CiAgICAgIHR5cGU6IE9iamVjdCwKICAgICAgZGVmYXVsdDogKCkgPT4gKHt9KQogICAgfSwKICAgIC8qKiDmmK/lkKblnKjliJvlu7rnu4Tku7bnmoTml7blgJnlsLHmn6Xor6LmlbDmja4gKi8KICAgIGltbWVkaWF0ZVJlcXVlc3Q6IHsKICAgICAgdHlwZTogQm9vbGVhbiwKICAgICAgZGVmYXVsdDogdHJ1ZQogICAgfSwKICAgIGNvbmRpdGlvbjp7CiAgICAgIHR5cGU6U3RyaW5nLAogICAgICBkZWZhdWx0OicnLAogICAgICByZXF1aXJlZDpmYWxzZQogICAgfQogIH0sCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGRhdGFTb3VyY2U6IFtdLAogICAgICBleHBhbmRlZFJvd0tleXM6IFtdCiAgICB9CiAgfSwKICBjb21wdXRlZDogewogICAgZ2V0Q2hpbGRyZW5VcmwoKSB7CiAgICAgIGlmICh0aGlzLmNoaWxkcmVuVXJsKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW5VcmwKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gdGhpcy51cmwKICAgICAgfQogICAgfSwKICAgIHNsb3RzKCkgewogICAgICBsZXQgc2xvdHMgPSBbXQogICAgICBmb3IgKGxldCBjb2x1bW4gb2YgdGhpcy5jb2x1bW5zKSB7CiAgICAgICAgaWYgKGNvbHVtbi5zY29wZWRTbG90cyAmJiBjb2x1bW4uc2NvcGVkU2xvdHMuY3VzdG9tUmVuZGVyKSB7CiAgICAgICAgICBzbG90cy5wdXNoKGNvbHVtbi5zY29wZWRTbG90cy5jdXN0b21SZW5kZXIpCiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiBzbG90cwogICAgfSwKICAgIHRhYmxlQXR0cnMoKSB7CiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHRoaXMuJGF0dHJzLCB0aGlzLnRhYmxlUHJvcHMpCiAgICB9CiAgfSwKICB3YXRjaDogewogICAgcXVlcnlQYXJhbXM6IHsKICAgICAgZGVlcDogdHJ1ZSwKICAgICAgaGFuZGxlcigpIHsKICAgICAgICB0aGlzLmxvYWREYXRhKCkKICAgICAgfQogICAgfQogIH0sCiAgY3JlYXRlZCgpIHsKICAgIGlmICh0aGlzLmltbWVkaWF0ZVJlcXVlc3QpIHRoaXMubG9hZERhdGEoKQogIH0sCiAgbWV0aG9kczogewoKICAgIC8qKiDliqDovb3mlbDmja4qLwogICAgbG9hZERhdGEoaWQgPSB0aGlzLnRvcFZhbHVlLCBmaXJzdCA9IHRydWUsIHVybCA9IHRoaXMudXJsKSB7CiAgICAgIHRoaXMuJGVtaXQoJ3JlcXVlc3RCZWZvcmUnLCB7IGZpcnN0IH0pCgogICAgICBpZiAoZmlyc3QpIHsKICAgICAgICB0aGlzLmV4cGFuZGVkUm93S2V5cyA9IFtdCiAgICAgIH0KCiAgICAgIGxldCBwYXJhbXMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLnF1ZXJ5UGFyYW1zIHx8IHt9KQogICAgICBwYXJhbXNbdGhpcy5xdWVyeUtleV0gPSBpZAogICAgICBpZih0aGlzLmNvbmRpdGlvbiAmJiB0aGlzLmNvbmRpdGlvbi5sZW5ndGg+MCl7CiAgICAgICAgcGFyYW1zWydjb25kaXRpb24nXSA9IHRoaXMuY29uZGl0aW9uCiAgICAgIH0KCiAgICAgIHJldHVybiBnZXRBY3Rpb24odXJsLCBwYXJhbXMpLnRoZW4ocmVzID0+IHsKICAgICAgICBsZXQgbGlzdCA9IFtdCiAgICAgICAgaWYgKHJlcy5yZXN1bHQgaW5zdGFuY2VvZiBBcnJheSkgewogICAgICAgICAgbGlzdCA9IHJlcy5yZXN1bHQKICAgICAgICB9IGVsc2UgaWYgKHJlcy5yZXN1bHQucmVjb3JkcyBpbnN0YW5jZW9mIEFycmF5KSB7CiAgICAgICAgICBsaXN0ID0gcmVzLnJlc3VsdC5yZWNvcmRzCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRocm93ICfov5Tlm57mlbDmja7nsbvlnovkuI3or4bliKsnCiAgICAgICAgfQogICAgICAgIGxldCBkYXRhU291cmNlID0gbGlzdC5tYXAoaXRlbSA9PiB7CiAgICAgICAgICAvLyDliKTmlq3mmK/lkKbmoIforrDkuobluKbmnInlrZDnuqcKICAgICAgICAgIGlmIChpdGVtLmhhc0NoaWxkcmVuID09PSB0cnVlKSB7CiAgICAgICAgICAgIC8vIOafpeaJvuesrOS4gOS4quW4puaciWRhdGFJbmRleOeahOWAvOeahOWIlwogICAgICAgICAgICBsZXQgZmlyc3RDb2x1bW4KICAgICAgICAgICAgZm9yIChsZXQgY29sdW1uIG9mIHRoaXMuY29sdW1ucykgewogICAgICAgICAgICAgIGZpcnN0Q29sdW1uID0gY29sdW1uLmRhdGFJbmRleAogICAgICAgICAgICAgIGlmIChmaXJzdENvbHVtbikgYnJlYWsKICAgICAgICAgICAgfQogICAgICAgICAgICAvLyDlrprkuYnpu5jorqTlsZXlvIDml7bmmL7npLrnmoRsb2FkaW5n5a2Q57qn77yM5a6e6ZmF5a2Q57qn5pWw5o2u5Y+q5Zyo5bGV5byA5pe25Yqg6L29CiAgICAgICAgICAgIGxldCBsb2FkQ2hpbGQgPSB7IGlkOiBgJHtpdGVtLmlkfV9sb2FkQ2hpbGRgLCBbZmlyc3RDb2x1bW5dOiAnbG9hZGluZy4uLicsIGlzTG9hZGluZzogdHJ1ZSB9CiAgICAgICAgICAgIGl0ZW0uY2hpbGRyZW4gPSBbbG9hZENoaWxkXQogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIGl0ZW0KICAgICAgICB9KQogICAgICAgIGlmIChmaXJzdCkgewogICAgICAgICAgdGhpcy5kYXRhU291cmNlID0gZGF0YVNvdXJjZQogICAgICAgIH0KICAgICAgICB0aGlzLiRlbWl0KCdyZXF1ZXN0U3VjY2VzcycsIHsgZmlyc3QsIGRhdGFTb3VyY2UsIHJlcyB9KQogICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZGF0YVNvdXJjZSkKICAgICAgfSkuZmluYWxseSgoKSA9PiB0aGlzLiRlbWl0KCdyZXF1ZXN0RmluYWxseScsIHsgZmlyc3QgfSkpCiAgICB9LAoKICAgIC8qKiDngrnlh7vlsZXlvIDlm77moIfml7bop6blj5EgKi8KICAgIGhhbmRsZUV4cGFuZChleHBhbmRlZCwgcmVjb3JkKSB7CiAgICAgIC8vIOWIpOaWreaYr+WQpuaYr+WxleW8gOeKtuaAgQogICAgICBpZiAoZXhwYW5kZWQpIHsKICAgICAgICAvLyDliKTmlq3lrZDnuqfnmoTpppbkuKrpobnnmoTmoIforrDmmK/lkKbmmK/igJzmraPlnKjliqDovb3kuK3igJ3vvIzlpoLmnpzmmK/lsLHliqDovb3mlbDmja4KICAgICAgICBpZiAocmVjb3JkLmNoaWxkcmVuWzBdLmlzTG9hZGluZyA9PT0gdHJ1ZSkgewogICAgICAgICAgdGhpcy5sb2FkRGF0YShyZWNvcmQuaWQsIGZhbHNlLCB0aGlzLmdldENoaWxkcmVuVXJsKS50aGVuKGRhdGFTb3VyY2UgPT4gewogICAgICAgICAgICAvLyDlpITnkIblpb3nmoTmlbDmja7lj6/nm7TmjqXotYvlgLznu5ljaGlsZHJlbgogICAgICAgICAgICBpZiAoZGF0YVNvdXJjZS5sZW5ndGggPT09IDApIHsKICAgICAgICAgICAgICByZWNvcmQuY2hpbGRyZW4gPSBudWxsCiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgcmVjb3JkLmNoaWxkcmVuID0gZGF0YVNvdXJjZQogICAgICAgICAgICB9CiAgICAgICAgICB9KQogICAgICAgIH0KICAgICAgfQogICAgfQoKICB9Cn0K"},{"version":3,"sources":["JTreeTable.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAmfile":"JTreeTable.vue","sourceRoot":"src/components/jeecg","sourcesContent":["<template>\r\n  <a-table\r\n    :rowKey=\"rowKey\"\r\n    :columns=\"columns\"\r\n    :dataSource=\"dataSource\"\r\n    :expandedRowKeys=\"expandedRowKeys\"\r\n    v-bind=\"tableAttrs\"\r\n    v-on=\"$listeners\"\r\n    @expand=\"handleExpand\"\r\n    @expandedRowsChange=\"expandedRowKeys=$event\">\r\n\r\n    <template v-for=\"(slotItem) of slots\" :slot=\"slotItem\" slot-scope=\"text, record, index\">\r\n      <slot :name=\"slotItem\" v-bind=\"{text,record,index}\"></slot>\r\n    </template>\r\n\r\n  </a-table>\r\n</template>\r\n\r\n<script>\r\n  import { getAction } from '@/api/manage'\r\n\r\n  export default {\r\n    name: 'JTreeTable',\r\n    props: {\r\n      rowKey: {\r\n        type: String,\r\n        default: 'id'\r\n      },\r\n      // 根据什么查询，如果传递 id 就根据 id 查询\r\n      queryKey: {\r\n        type: String,\r\n        default: 'parentId'\r\n      },\r\n      queryParams: {\r\n        type: Object,\r\n        default: () => ({})\r\n      },\r\n      // 查询顶级时的值，如果顶级为0，则传0\r\n      topValue: {\r\n        type: String,\r\n        default: null\r\n      },\r\n      columns: {\r\n        type: Array,\r\n        required: true\r\n      },\r\n      url: {\r\n        type: String,\r\n        required: true\r\n      },\r\n      childrenUrl: {\r\n        type: String,\r\n        default: null\r\n      },\r\n      tableProps: {\r\n        type: Object,\r\n        default: () => ({})\r\n      },\r\n      /** 是否在创建组件的时候就查询数据 */\r\n      immediateRequest: {\r\n        type: Boolean,\r\n        default: true\r\n      },\r\n      condition:{\r\n        type:String,\r\n        default:'',\r\n        required:false\r\n      }\r\n    },\r\n    data() {\r\n      return {\r\n        dataSource: [],\r\n        expandedRowKeys: []\r\n      }\r\n    },\r\n    computed: {\r\n      getChildrenUrl() {\r\n        if (this.childrenUrl) {\r\n          return this.childrenUrl\r\n        } else {\r\n          return this.url\r\n        }\r\n      },\r\n      slots() {\r\n        let slots = []\r\n        for (let column of this.columns) {\r\n          if (column.scopedSlots && column.scopedSlots.customRender) {\r\n            slots.push(column.scopedSlots.customRender)\r\n          }\r\n        }\r\n        return slots\r\n      },\r\n      tableAttrs() {\r\n        return Object.assign(this.$attrs, this.tableProps)\r\n      }\r\n    },\r\n    watch: {\r\n      queryParams: {\r\n        deep: true,\r\n        handler() {\r\n          this.loadData()\r\n        }\r\n      }\r\n    },\r\n    created() {\r\n      if (this.immediateRequest) this.loadData()\r\n    },\r\n    methods: {\r\n\r\n      /** 加载数据*/\r\n      loadData(id = this.topValue, first = true, url = this.url) {\r\n        this.$emit('requestBefore', { first })\r\n\r\n        if (first) {\r\n          this.expandedRowKeys = []\r\n        }\r\n\r\n        let params = Object.assign({}, this.queryParams || {})\r\n        params[this.queryKey] = id\r\n        if(this.condition && this.condition.length>0){\r\n          params['condition'] = this.condition\r\n        }\r\n\r\n        return getAction(url, params).then(res => {\r\n          let list = []\r\n          if (res.result instanceof Array) {\r\n            list = res.result\r\n          } else if (res.result.records instanceof Array) {\r\n            list = res.result.records\r\n          } else {\r\n            throw '返回数据类型不识别'\r\n          }\r\n          let dataSource = list.map(item => {\r\n            // 判断是否标记了带有子级\r\n            if (item.hasChildren === true) {\r\n              // 查找第一个带有dataIndex的值的列\r\n              let firstColumn\r\n              for (let column of this.columns) {\r\n                firstColumn = column.dataIndex\r\n                if (firstColumn) break\r\n              }\r\n              // 定义默认展开时显示的loading子级，实际子级数据只在展开时加载\r\n              let loadChild = { id: `${item.id}_loadChild`, [firstColumn]: 'loading...', isLoading: true }\r\n              item.children = [loadChild]\r\n            }\r\n            return item\r\n          })\r\n          if (first) {\r\n            this.dataSource = dataSource\r\n          }\r\n          this.$emit('requestSuccess', { first, dataSource, res })\r\n          return Promise.resolve(dataSource)\r\n        }).finally(() => this.$emit('requestFinally', { first }))\r\n      },\r\n\r\n      /** 点击展开图标时触发 */\r\n      handleExpand(expanded, record) {\r\n        // 判断是否是展开状态\r\n        if (expanded) {\r\n          // 判断子级的首个项的标记是否是“正在加载中”，如果是就加载数据\r\n          if (record.children[0].isLoading === true) {\r\n            this.loadData(record.id, false, this.getChildrenUrl).then(dataSource => {\r\n              // 处理好的数据可直接赋值给children\r\n              if (dataSource.length === 0) {\r\n                record.children = null\r\n              } else {\r\n                record.children = dataSource\r\n              }\r\n            })\r\n          }\r\n        }\r\n      }\r\n\r\n    }\r\n  }\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"]}]}