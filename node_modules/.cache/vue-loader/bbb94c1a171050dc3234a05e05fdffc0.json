{"remainingRequest":"D:\\vue\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\vue\\src\\views\\modules\\monitor\\RedisInfo.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\vue\\src\\views\\modules\\monitor\\RedisInfo.vue","mtime":1615948820448},{"path":"D:\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1615952641464},{"path":"D:\\vue\\node_modules\\babel-loader\\lib\\index.js","mtime":1615952610415},{"path":"D:\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1615952641464},{"path":"D:\\vue\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1615952643260}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JwppbXBvcnQgeyBnZXRBY3Rpb24gfSBmcm9tICdAL2FwaS9tYW5hZ2UnCmltcG9ydCBBcmVhQ2hhcnRUeSBmcm9tICdAL2NvbXBvbmVudHMvY2hhcnQvQXJlYUNoYXJ0VHknCgpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ1JlZGlzSW5mbycsCiAgY29tcG9uZW50czogewogICAgQXJlYUNoYXJ0VHkKICB9LAogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBsb2FkaW5nOiB0cnVlLAogICAgICB0YWJsZUxvYWRpbmc6IHRydWUsCiAgICAgIC8vIOWumuaXtuWZqElECiAgICAgIHRpbWVyOiBudWxsLAogICAgICAvLyDlrprml7blmajlkajmnJ8KICAgICAgbWlsbGlzZWM6IDMwMDAsCiAgICAgIC8vIEtleSDlrp7ml7bmlbDph48KICAgICAga2V5OiB7CiAgICAgICAgdGl0bGU6ICdSYWRpcyBLZXkg5a6e5pe25pWw6YeP77yI5Liq77yJJywKICAgICAgICBkYXRhU291cmNlOiBbXSwKICAgICAgICB5OiAn5pWw6YeP77yI5Liq77yJJywKICAgICAgICBoZWlnaHQ6IDM0MCwKICAgICAgICBtaW46IDAsCiAgICAgICAgbWF4OiAxMDAsCiAgICAgICAgY29sb3I6ICcjRkY2OTg3JywKICAgICAgICBsaW5lU2l6ZTogOCwKICAgICAgICBsaW5lQ29sb3I6ICcjREMxNDNDJwogICAgICB9LAogICAgICAvLyDlhoXlrZjlrp7ml7bljaDnlKjmg4XlhrUKICAgICAgbWVtb3J5OiB7CiAgICAgICAgdGl0bGU6ICdSYWRpcyDlhoXlrZjlrp7ml7bljaDnlKjmg4XlhrXvvIhLQu+8iScsCiAgICAgICAgZGF0YVNvdXJjZTogW10sCiAgICAgICAgeTogJ+WGheWtmO+8iEtC77yJJywKICAgICAgICBtaW46IDAsCiAgICAgICAgbWF4OiAzMDAwLAogICAgICAgIGhlaWdodDogMzQwLAogICAgICAgIGxpbmVTaXplOiA4CiAgICAgIH0sCiAgICAgIHJlZGlzSW5mbzogW10sCiAgICAgIGNvbHVtbnM6IFt7CiAgICAgICAgdGl0bGU6ICdLZXknLAogICAgICAgIGFsaWduOiAnY2VudGVyJywKICAgICAgICBkYXRhSW5kZXg6ICdrZXknCiAgICAgIH0sIHsKICAgICAgICB0aXRsZTogJ0Rlc2NyaXB0aW9uJywKICAgICAgICBhbGlnbjogJ2xlZnQnLAogICAgICAgIGRhdGFJbmRleDogJ2Rlc2NyaXB0aW9uJwogICAgICB9LCB7CiAgICAgICAgdGl0bGU6ICdWYWx1ZScsCiAgICAgICAgYWxpZ246ICdjZW50ZXInLAogICAgICAgIGRhdGFJbmRleDogJ3ZhbHVlJwogICAgICB9XSwKICAgICAgdXJsOiB7CiAgICAgICAga2V5c1NpemU6ICcvc3lzL2FjdHVhdG9yL3JlZGlzL2tleXNTaXplJywKICAgICAgICBtZW1vcnlJbmZvOiAnL3N5cy9hY3R1YXRvci9yZWRpcy9tZW1vcnlJbmZvJywKICAgICAgICBpbmZvOiAnL3N5cy9hY3R1YXRvci9yZWRpcy9pbmZvJwogICAgICB9LAogICAgICBwYXRoOiAnL21vbml0b3IvcmVkaXMvaW5mbycKICAgIH0KICB9LAogIG1vdW50ZWQoKSB7CiAgICB0aGlzLm9wZW5UaW1lcigpCiAgICB0aGlzLmxvYWRSZWRpc0luZm8oKQogICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgIHRoaXMubG9hZERhdGEoKQogICAgfSwgMTAwMCkKICB9LAogIGJlZm9yZURlc3Ryb3koKSB7CiAgICB0aGlzLmNsb3NlVGltZXIoKQogIH0sCiAgbWV0aG9kczogewoKICAgIC8qKiDlvIDlkK/lrprml7blmaggKi8KICAgIG9wZW5UaW1lcigpIHsKICAgICAgdGhpcy5sb2FkRGF0YSgpCiAgICAgIHRoaXMuY2xvc2VUaW1lcigpCiAgICAgIHRoaXMudGltZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7CiAgICAgICAgaWYgKHRoaXMuJHJvdXRlLnBhdGggPT09IHRoaXMucGF0aCkgewogICAgICAgICAgdGhpcy5sb2FkRGF0YSgpCiAgICAgICAgfQogICAgICB9LCB0aGlzLm1pbGxpc2VjKQogICAgfSwKCiAgICAvKiog5YWz6Zet5a6a5pe25ZmoICovCiAgICBjbG9zZVRpbWVyKCkgewogICAgICBpZiAodGhpcy50aW1lcikgY2xlYXJJbnRlcnZhbCh0aGlzLnRpbWVyKQogICAgfSwKCiAgICAvKiog5p+l6K+i5pWw5o2uICovCiAgICBsb2FkRGF0YSgpIHsKICAgICAgUHJvbWlzZS5hbGwoWwogICAgICAgIGdldEFjdGlvbih0aGlzLnVybC5rZXlzU2l6ZSksCiAgICAgICAgZ2V0QWN0aW9uKHRoaXMudXJsLm1lbW9yeUluZm8pCiAgICAgIF0pLnRoZW4oKHJlcykgPT4gewogICAgICAgIGxldCB0aW1lID0gbW9tZW50KCkuZm9ybWF0KCdoaDptbTpzcycpCgogICAgICAgIGxldCBbeyBkYlNpemU6IGN1cnJlbnRTaXplIH0sIG1lbW9yeUluZm9dID0gcmVzCiAgICAgICAgbGV0IGN1cnJlbnRNZW1vcnkgPSBtZW1vcnlJbmZvLnVzZWRfbWVtb3J5IC8gMTAwMAoKICAgICAgICAvLyBwdXNoIOaVsOaNrgogICAgICAgIHRoaXMua2V5LmRhdGFTb3VyY2UucHVzaCh7IHg6IHRpbWUsIHk6IGN1cnJlbnRTaXplIH0pCiAgICAgICAgdGhpcy5tZW1vcnkuZGF0YVNvdXJjZS5wdXNoKHsgeDogdGltZSwgeTogY3VycmVudE1lbW9yeSB9KQogICAgICAgIC8vIOacgOWkp+mVv+W6puS4ujYKICAgICAgICBpZiAodGhpcy5rZXkuZGF0YVNvdXJjZS5sZW5ndGggPiA2KSB7CiAgICAgICAgICB0aGlzLmtleS5kYXRhU291cmNlLnNwbGljZSgwLCAxKQogICAgICAgICAgdGhpcy5tZW1vcnkuZGF0YVNvdXJjZS5zcGxpY2UoMCwgMSkKICAgICAgICB9CgogICAgICAgIC8vIOiuoeeulyBLZXkg5pyA5aSn5pyA5bCP5YC8CiAgICAgICAgbGV0IGtleVBvbGUgPSB0aGlzLmdldE1heEFuZE1pbih0aGlzLmtleS5kYXRhU291cmNlLCAneScpCiAgICAgICAgdGhpcy5rZXkubWF4ID0gTWF0aC5mbG9vcihrZXlQb2xlWzBdKSArIDEwCiAgICAgICAgdGhpcy5rZXkubWluID0gTWF0aC5mbG9vcihrZXlQb2xlWzFdKSAtIDEwCiAgICAgICAgaWYgKHRoaXMua2V5Lm1pbiA8IDApIHRoaXMua2V5Lm1pbiA9IDAKCiAgICAgICAgLy8g6K6h566XIE1lbW9yeSDmnIDlpKfmnIDlsI/lgLwKICAgICAgICBsZXQgbWVtb3J5UG9sZSA9IHRoaXMuZ2V0TWF4QW5kTWluKHRoaXMubWVtb3J5LmRhdGFTb3VyY2UsICd5JykKICAgICAgICB0aGlzLm1lbW9yeS5tYXggPSBNYXRoLmZsb29yKG1lbW9yeVBvbGVbMF0pICsgMTAwCiAgICAgICAgdGhpcy5tZW1vcnkubWluID0gTWF0aC5mbG9vcihtZW1vcnlQb2xlWzFdKSAtIDEwMAogICAgICAgIGlmICh0aGlzLm1lbW9yeS5taW4gPCAwKSB0aGlzLm1lbW9yeS5taW4gPSAwCgogICAgICB9KS5jYXRjaCgoZSkgPT4gewogICAgICAgIGNvbnNvbGUuZXJyb3IoZSkKICAgICAgICB0aGlzLmNsb3NlVGltZXIoKQogICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IoJ+iOt+WPliBSZWRpcyDkv6Hmga/lpLHotKUnKQogICAgICB9KS5maW5hbGx5KCgpID0+IHsKICAgICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZQogICAgICB9KQoKICAgIH0sCgogICAgLy8g6I635Y+W5LiA57uE5pWw5o2u5Lit5pyA5aSn5ZKM5pyA5bCP55qE5YC8CiAgICBnZXRNYXhBbmRNaW4oZGF0YVNvdXJjZSwgZmllbGQpIHsKICAgICAgbGV0IG1heFZhbHVlID0gbnVsbCwgbWluVmFsdWUgPSBudWxsCiAgICAgIGRhdGFTb3VyY2UuZm9yRWFjaChpdGVtID0+IHsKICAgICAgICBsZXQgdmFsdWUgPSBOdW1iZXIucGFyc2VJbnQoaXRlbVtmaWVsZF0pCiAgICAgICAgLy8gbWF4CiAgICAgICAgaWYgKG1heFZhbHVlID09IG51bGwpIHsKICAgICAgICAgIG1heFZhbHVlID0gdmFsdWUKICAgICAgICB9IGVsc2UgaWYgKHZhbHVlID4gbWF4VmFsdWUpIHsKICAgICAgICAgIG1heFZhbHVlID0gdmFsdWUKICAgICAgICB9CiAgICAgICAgLy8gbWluCiAgICAgICAgaWYgKG1pblZhbHVlID09IG51bGwpIHsKICAgICAgICAgIG1pblZhbHVlID0gdmFsdWUKICAgICAgICB9IGVsc2UgaWYgKHZhbHVlIDwgbWluVmFsdWUpIHsKICAgICAgICAgIG1pblZhbHVlID0gdmFsdWUKICAgICAgICB9CiAgICAgIH0pCiAgICAgIHJldHVybiBbbWF4VmFsdWUsIG1pblZhbHVlXQogICAgfSwKCiAgICBsb2FkUmVkaXNJbmZvKCkgewogICAgICB0aGlzLnRhYmxlTG9hZGluZyA9IHRydWUKICAgICAgZ2V0QWN0aW9uKHRoaXMudXJsLmluZm8pLnRoZW4oKHJlcykgPT4gewogICAgICAgIHRoaXMucmVkaXNJbmZvID0gcmVzLnJlc3VsdAogICAgICB9KS5maW5hbGx5KCgpID0+IHsKICAgICAgICB0aGlzLnRhYmxlTG9hZGluZyA9IGZhbHNlCiAgICAgIH0pCiAgICB9CgogIH0KfQo="},{"version":3,"sources":["RedisInfo.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAwBA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"RedisInfo.vue","sourceRoot":"src/views/modules/monitor","sourcesContent":["<template>\r\n  <a-skeleton active :loading=\"loading\" :paragraph=\"{rows: 17}\">\r\n    <a-card>\r\n      <!-- Radis 信息实时监控 -->\r\n      <a-row :gutter=\"8\">\r\n        <a-col :sm=\"24\" :xl=\"12\">\r\n          <area-chart-ty v-bind=\"memory\"/>\r\n        </a-col>\r\n        <a-col :sm=\"24\" :xl=\"12\">\r\n          <area-chart-ty v-bind=\"key\"/>\r\n        </a-col>\r\n      </a-row>\r\n\r\n      <h3>Redis 详细信息</h3>\r\n      <a-table\r\n        :loading=\"tableLoading\"\r\n        :columns=\"columns\"\r\n        :dataSource=\"redisInfo\"\r\n        :pagination=\"false\"/>\r\n\r\n    </a-card>\r\n  </a-skeleton>\r\n</template>\r\n<script>\r\n  import moment from 'moment'\r\n  import { getAction } from '@/api/manage'\r\n  import AreaChartTy from '@/components/chart/AreaChartTy'\r\n\r\n  export default {\r\n    name: 'RedisInfo',\r\n    components: {\r\n      AreaChartTy\r\n    },\r\n    data() {\r\n      return {\r\n        loading: true,\r\n        tableLoading: true,\r\n        // 定时器ID\r\n        timer: null,\r\n        // 定时器周期\r\n        millisec: 3000,\r\n        // Key 实时数量\r\n        key: {\r\n          title: 'Radis Key 实时数量（个）',\r\n          dataSource: [],\r\n          y: '数量（个）',\r\n          height: 340,\r\n          min: 0,\r\n          max: 100,\r\n          color: '#FF6987',\r\n          lineSize: 8,\r\n          lineColor: '#DC143C'\r\n        },\r\n        // 内存实时占用情况\r\n        memory: {\r\n          title: 'Radis 内存实时占用情况（KB）',\r\n          dataSource: [],\r\n          y: '内存（KB）',\r\n          min: 0,\r\n          max: 3000,\r\n          height: 340,\r\n          lineSize: 8\r\n        },\r\n        redisInfo: [],\r\n        columns: [{\r\n          title: 'Key',\r\n          align: 'center',\r\n          dataIndex: 'key'\r\n        }, {\r\n          title: 'Description',\r\n          align: 'left',\r\n          dataIndex: 'description'\r\n        }, {\r\n          title: 'Value',\r\n          align: 'center',\r\n          dataIndex: 'value'\r\n        }],\r\n        url: {\r\n          keysSize: '/sys/actuator/redis/keysSize',\r\n          memoryInfo: '/sys/actuator/redis/memoryInfo',\r\n          info: '/sys/actuator/redis/info'\r\n        },\r\n        path: '/monitor/redis/info'\r\n      }\r\n    },\r\n    mounted() {\r\n      this.openTimer()\r\n      this.loadRedisInfo()\r\n      setTimeout(() => {\r\n        this.loadData()\r\n      }, 1000)\r\n    },\r\n    beforeDestroy() {\r\n      this.closeTimer()\r\n    },\r\n    methods: {\r\n\r\n      /** 开启定时器 */\r\n      openTimer() {\r\n        this.loadData()\r\n        this.closeTimer()\r\n        this.timer = setInterval(() => {\r\n          if (this.$route.path === this.path) {\r\n            this.loadData()\r\n          }\r\n        }, this.millisec)\r\n      },\r\n\r\n      /** 关闭定时器 */\r\n      closeTimer() {\r\n        if (this.timer) clearInterval(this.timer)\r\n      },\r\n\r\n      /** 查询数据 */\r\n      loadData() {\r\n        Promise.all([\r\n          getAction(this.url.keysSize),\r\n          getAction(this.url.memoryInfo)\r\n        ]).then((res) => {\r\n          let time = moment().format('hh:mm:ss')\r\n\r\n          let [{ dbSize: currentSize }, memoryInfo] = res\r\n          let currentMemory = memoryInfo.used_memory / 1000\r\n\r\n          // push 数据\r\n          this.key.dataSource.push({ x: time, y: currentSize })\r\n          this.memory.dataSource.push({ x: time, y: currentMemory })\r\n          // 最大长度为6\r\n          if (this.key.dataSource.length > 6) {\r\n            this.key.dataSource.splice(0, 1)\r\n            this.memory.dataSource.splice(0, 1)\r\n          }\r\n\r\n          // 计算 Key 最大最小值\r\n          let keyPole = this.getMaxAndMin(this.key.dataSource, 'y')\r\n          this.key.max = Math.floor(keyPole[0]) + 10\r\n          this.key.min = Math.floor(keyPole[1]) - 10\r\n          if (this.key.min < 0) this.key.min = 0\r\n\r\n          // 计算 Memory 最大最小值\r\n          let memoryPole = this.getMaxAndMin(this.memory.dataSource, 'y')\r\n          this.memory.max = Math.floor(memoryPole[0]) + 100\r\n          this.memory.min = Math.floor(memoryPole[1]) - 100\r\n          if (this.memory.min < 0) this.memory.min = 0\r\n\r\n        }).catch((e) => {\r\n          console.error(e)\r\n          this.closeTimer()\r\n          this.$message.error('获取 Redis 信息失败')\r\n        }).finally(() => {\r\n          this.loading = false\r\n        })\r\n\r\n      },\r\n\r\n      // 获取一组数据中最大和最小的值\r\n      getMaxAndMin(dataSource, field) {\r\n        let maxValue = null, minValue = null\r\n        dataSource.forEach(item => {\r\n          let value = Number.parseInt(item[field])\r\n          // max\r\n          if (maxValue == null) {\r\n            maxValue = value\r\n          } else if (value > maxValue) {\r\n            maxValue = value\r\n          }\r\n          // min\r\n          if (minValue == null) {\r\n            minValue = value\r\n          } else if (value < minValue) {\r\n            minValue = value\r\n          }\r\n        })\r\n        return [maxValue, minValue]\r\n      },\r\n\r\n      loadRedisInfo() {\r\n        this.tableLoading = true\r\n        getAction(this.url.info).then((res) => {\r\n          this.redisInfo = res.result\r\n        }).finally(() => {\r\n          this.tableLoading = false\r\n        })\r\n      }\r\n\r\n    }\r\n  }\r\n</script>\r\n<style></style>\r\n"]}]}