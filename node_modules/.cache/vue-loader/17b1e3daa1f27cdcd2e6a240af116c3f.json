{"remainingRequest":"D:\\vue\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\vue\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\vue\\src\\views\\system\\modules\\UserModal.vue?vue&type=template&id=c5fccb98&scoped=true&","dependencies":[{"path":"D:\\vue\\src\\views\\system\\modules\\UserModal.vue","mtime":1615948821524},{"path":"D:\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1615952641464},{"path":"D:\\vue\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1615952643260},{"path":"D:\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1615952641464},{"path":"D:\\vue\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1615952643260}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImEtZHJhd2VyIiwKICAgIHsKICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICBoZWlnaHQ6ICIxMDAlIiwKICAgICAgICBvdmVyZmxvdzogImF1dG8iLAogICAgICAgICJwYWRkaW5nLWJvdHRvbSI6ICI1M3B4IgogICAgICB9LAogICAgICBhdHRyczogewogICAgICAgIHRpdGxlOiBfdm0udGl0bGUsCiAgICAgICAgbWFza0Nsb3NhYmxlOiB0cnVlLAogICAgICAgIHdpZHRoOiBfdm0uZHJhd2VyV2lkdGgsCiAgICAgICAgcGxhY2VtZW50OiAicmlnaHQiLAogICAgICAgIGNsb3NhYmxlOiB0cnVlLAogICAgICAgIHZpc2libGU6IF92bS52aXNpYmxlCiAgICAgIH0sCiAgICAgIG9uOiB7IGNsb3NlOiBfdm0uaGFuZGxlQ2FuY2VsIH0KICAgIH0sCiAgICBbCiAgICAgIF9jKCJ0ZW1wbGF0ZSIsIHsgc2xvdDogInRpdGxlIiB9LCBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICIxMDAlIiB9IH0sIFsKICAgICAgICAgIF9jKCJzcGFuIiwgW192bS5fdihfdm0uX3MoX3ZtLnRpdGxlKSldKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAic3BhbiIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgICAgZGlzcGxheTogImlubGluZS1ibG9jayIsCiAgICAgICAgICAgICAgICB3aWR0aDogImNhbGMoMTAwJSAtIDUxcHgpIiwKICAgICAgICAgICAgICAgICJwYWRkaW5nLXJpZ2h0IjogIjEwcHgiLAogICAgICAgICAgICAgICAgInRleHQtYWxpZ24iOiAicmlnaHQiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoImEtYnV0dG9uIiwgewogICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgaGVpZ2h0OiAiMjBweCIsIHdpZHRoOiAiMjBweCIsIGJvcmRlcjogIjBweCIgfSwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGljb246ICJhcHBzdG9yZSIgfSwKICAgICAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0udG9nZ2xlU2NyZWVuIH0KICAgICAgICAgICAgICB9KQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKAogICAgICAgICJhLXNwaW4iLAogICAgICAgIHsgYXR0cnM6IHsgc3Bpbm5pbmc6IF92bS5jb25maXJtTG9hZGluZyB9IH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhLWZvcm0iLAogICAgICAgICAgICB7IGF0dHJzOiB7IGZvcm06IF92bS5mb3JtIH0gfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImEtZm9ybS1pdGVtIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBsYWJlbDogIueUqOaIt+i0puWPtyIsCiAgICAgICAgICAgICAgICAgICAgbGFiZWxDb2w6IF92bS5sYWJlbENvbCwKICAgICAgICAgICAgICAgICAgICB3cmFwcGVyQ29sOiBfdm0ud3JhcHBlckNvbAogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiYS1pbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJkZWNvcmF0b3IiLAogICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1kZWNvcmF0b3IudHJpbSIsCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBbInVzZXJuYW1lIiwgX3ZtLnZhbGlkYXRvclJ1bGVzLnVzZXJuYW1lXSwKICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIlsgJ3VzZXJuYW1lJywgdmFsaWRhdG9yUnVsZXMudXNlcm5hbWVdIiwKICAgICAgICAgICAgICAgICAgICAgICAgbW9kaWZpZXJzOiB7IHRyaW06IHRydWUgfQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAi6K+36L6T5YWl55So5oi36LSm5Y+3IiwKICAgICAgICAgICAgICAgICAgICAgIHJlYWRPbmx5OiAhIV92bS5tb2RlbC5pZAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAhX3ZtLm1vZGVsLmlkCiAgICAgICAgICAgICAgICA/IFsKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJhLWZvcm0taXRlbSIsCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICLnmbvlvZXlr4bnoIEiLAogICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsQ29sOiBfdm0ubGFiZWxDb2wsCiAgICAgICAgICAgICAgICAgICAgICAgICAgd3JhcHBlckNvbDogX3ZtLndyYXBwZXJDb2wKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImEtaW5wdXQiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAiZGVjb3JhdG9yIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtZGVjb3JhdG9yIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IFsicGFzc3dvcmQiLCBfdm0udmFsaWRhdG9yUnVsZXMucGFzc3dvcmRdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJbICdwYXNzd29yZCcsdmFsaWRhdG9yUnVsZXMucGFzc3dvcmRdIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJwYXNzd29yZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogIuivt+i+k+WFpeeZu+W9leWvhueggSIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAiYS1mb3JtLWl0ZW0iLAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiAi56Gu6K6k5a+G56CBIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbENvbDogX3ZtLmxhYmVsQ29sLAogICAgICAgICAgICAgICAgICAgICAgICAgIHdyYXBwZXJDb2w6IF92bS53cmFwcGVyQ29sCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJhLWlucHV0IiwgewogICAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogImRlY29yYXRvciIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWRlY29yYXRvciIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImNvbmZpcm1wYXNzd29yZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnZhbGlkYXRvclJ1bGVzLmNvbmZpcm1wYXNzd29yZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJbICdjb25maXJtcGFzc3dvcmQnLCB2YWxpZGF0b3JSdWxlcy5jb25maXJtcGFzc3dvcmRdIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJwYXNzd29yZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogIuivt+mHjeaWsOi+k+WFpeeZu+W9leWvhueggSIKICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIG9uOiB7IGJsdXI6IF92bS5oYW5kbGVDb25maXJtQmx1ciB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgOiBfdm0uX2UoKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJhLWZvcm0taXRlbSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICLnlKjmiLflp5PlkI0iLAogICAgICAgICAgICAgICAgICAgIGxhYmVsQ29sOiBfdm0ubGFiZWxDb2wsCiAgICAgICAgICAgICAgICAgICAgd3JhcHBlckNvbDogX3ZtLndyYXBwZXJDb2wKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoImEtaW5wdXQiLCB7CiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAiZGVjb3JhdG9yIiwKICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtZGVjb3JhdG9yLnRyaW0iLAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogWyJyZWFsbmFtZSIsIF92bS52YWxpZGF0b3JSdWxlcy5yZWFsbmFtZV0sCiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJbICdyZWFsbmFtZScsIHZhbGlkYXRvclJ1bGVzLnJlYWxuYW1lXSIsCiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGlmaWVyczogeyB0cmltOiB0cnVlIH0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHBsYWNlaG9sZGVyOiAi6K+36L6T5YWl55So5oi35aeT5ZCNIiB9CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYS1mb3JtLWl0ZW0iLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIGxhYmVsOiAi5bel5Y+3IiwKICAgICAgICAgICAgICAgICAgICBsYWJlbENvbDogX3ZtLmxhYmVsQ29sLAogICAgICAgICAgICAgICAgICAgIHdyYXBwZXJDb2w6IF92bS53cmFwcGVyQ29sCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJhLWlucHV0IiwgewogICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogImRlY29yYXRvciIsCiAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWRlY29yYXRvci50cmltIiwKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IFsid29ya05vIiwgX3ZtLnZhbGlkYXRvclJ1bGVzLndvcmtOb10sCiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJbICd3b3JrTm8nLCB2YWxpZGF0b3JSdWxlcy53b3JrTm9dIiwKICAgICAgICAgICAgICAgICAgICAgICAgbW9kaWZpZXJzOiB7IHRyaW06IHRydWUgfQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgcGxhY2Vob2xkZXI6ICLor7fovpPlhaXlt6Xlj7ciIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJhLWZvcm0taXRlbSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICLogYzliqEiLAogICAgICAgICAgICAgICAgICAgIGxhYmVsQ29sOiBfdm0ubGFiZWxDb2wsCiAgICAgICAgICAgICAgICAgICAgd3JhcHBlckNvbDogX3ZtLndyYXBwZXJDb2wKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoImotc2VsZWN0LXBvc2l0aW9uIiwgewogICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogImRlY29yYXRvciIsCiAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWRlY29yYXRvciIsCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBbInBvc3QiLCB7fV0sCiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJbJ3Bvc3QnLCB7fV0iCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBwbGFjZWhvbGRlcjogIuivt+mAieaLqeiBjOWKoSIsIG11bHRpcGxlOiBmYWxzZSB9CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYS1mb3JtLWl0ZW0iLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIV92bS5yb2xlRGlzYWJsZWQsCiAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiIXJvbGVEaXNhYmxlZCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICLop5LoibLliIbphY0iLAogICAgICAgICAgICAgICAgICAgIGxhYmVsQ29sOiBfdm0ubGFiZWxDb2wsCiAgICAgICAgICAgICAgICAgICAgd3JhcHBlckNvbDogX3ZtLndyYXBwZXJDb2wKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgImEtc2VsZWN0IiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyB3aWR0aDogIjEwMCUiIH0sCiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICBtb2RlOiAibXVsdGlwbGUiLAogICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDogX3ZtLmRlcGFydERpc2FibGVkLAogICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogIuivt+mAieaLqeeUqOaIt+inkuiJsiIsCiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbkZpbHRlclByb3A6ICJjaGlsZHJlbiIsCiAgICAgICAgICAgICAgICAgICAgICAgIGdldFBvcHVwQ29udGFpbmVyOiBmdW5jdGlvbih0YXJnZXQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0LnBhcmVudE5vZGUKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIG1vZGVsOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uc2VsZWN0ZWRSb2xlLAogICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24oJCR2KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnNlbGVjdGVkUm9sZSA9ICQkdgogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAic2VsZWN0ZWRSb2xlIgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgX3ZtLl9sKF92bS5yb2xlTGlzdCwgZnVuY3Rpb24ocm9sZSwgcm9sZWluZGV4KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICJhLXNlbGVjdC1vcHRpb24iLAogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAga2V5OiByb2xlaW5kZXgudG9TdHJpbmcoKSwKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyB2YWx1ZTogcm9sZS5pZCB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIiAiICsgX3ZtLl9zKHJvbGUucm9sZU5hbWUpICsgIiAiKV0KICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJhLWZvcm0taXRlbSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAhX3ZtLmRlcGFydERpc2FibGVkLAogICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIiFkZXBhcnREaXNhYmxlZCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICLpg6jpl6jliIbphY0iLAogICAgICAgICAgICAgICAgICAgIGxhYmVsQ29sOiBfdm0ubGFiZWxDb2wsCiAgICAgICAgICAgICAgICAgICAgd3JhcHBlckNvbDogX3ZtLndyYXBwZXJDb2wKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgImEtaW5wdXQtc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBwbGFjZWhvbGRlcjogIueCueWHu+mAieaLqemDqOmXqCIsIHJlYWRPbmx5OiAiIiB9LAogICAgICAgICAgICAgICAgICAgICAgb246IHsgc2VhcmNoOiBfdm0ub25TZWFyY2ggfSwKICAgICAgICAgICAgICAgICAgICAgIG1vZGVsOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uY2hlY2tlZERlcGFydE5hbWVTdHJpbmcsCiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbigkJHYpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uY2hlY2tlZERlcGFydE5hbWVTdHJpbmcgPSAkJHYKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImNoZWNrZWREZXBhcnROYW1lU3RyaW5nIgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICJhLWJ1dHRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBzbG90OiAiZW50ZXJCdXR0b24iLCBpY29uOiAic2VhcmNoIiB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIHNsb3Q6ICJlbnRlckJ1dHRvbiIKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigi6YCJ5oupIildCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJhLWZvcm0taXRlbSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAhX3ZtLmRlcGFydERpc2FibGVkLAogICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIiFkZXBhcnREaXNhYmxlZCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICLnp5/miLfliIbphY0iLAogICAgICAgICAgICAgICAgICAgIGxhYmVsQ29sOiBfdm0ubGFiZWxDb2wsCiAgICAgICAgICAgICAgICAgICAgd3JhcHBlckNvbDogX3ZtLndyYXBwZXJDb2wKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgImEtc2VsZWN0IiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyB3aWR0aDogIjEwMCUiIH0sCiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICBtb2RlOiAibXVsdGlwbGUiLAogICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogIuivt+mAieaLqeenn+aIt+WIhumFjSIsCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiBfdm0uZGlzYWJsZVN1Ym1pdAogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIG1vZGVsOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uY3VycmVudFRlbmFudCwKICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uKCQkdikgewogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5jdXJyZW50VGVuYW50ID0gJCR2CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJjdXJyZW50VGVuYW50IgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgX3ZtLl9sKF92bS50ZW5hbnRMaXN0LCBmdW5jdGlvbihpdGVtLCBpbmRleCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAiYS1zZWxlY3Qtb3B0aW9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgeyBrZXk6IGluZGV4LCBhdHRyczogeyB2YWx1ZTogaXRlbS5pZCB9IH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIiAiICsgX3ZtLl9zKGl0ZW0ubmFtZSkgKyAiICIpXQogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImEtZm9ybS1pdGVtIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBsYWJlbDogIui6q+S7vSIsCiAgICAgICAgICAgICAgICAgICAgbGFiZWxDb2w6IF92bS5sYWJlbENvbCwKICAgICAgICAgICAgICAgICAgICB3cmFwcGVyQ29sOiBfdm0ud3JhcHBlckNvbAogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAiYS1yYWRpby1ncm91cCIsCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgb246IHsgY2hhbmdlOiBfdm0uaWRlbnRpdHlDaGFuZ2UgfSwKICAgICAgICAgICAgICAgICAgICAgIG1vZGVsOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uaWRlbnRpdHksCiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbigkJHYpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uaWRlbnRpdHkgPSAkJHYKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImlkZW50aXR5IgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImEtcmFkaW8iLCB7IGF0dHJzOiB7IHZhbHVlOiAiMSIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigi5pmu6YCa55So5oi3IikKICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoImEtcmFkaW8iLCB7IGF0dHJzOiB7IHZhbHVlOiAiMiIgfSB9LCBbX3ZtLl92KCLkuIrnuqciKV0pCiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfdm0uZGVwYXJ0SWRTaG93ID09IHRydWUKICAgICAgICAgICAgICAgID8gX2MoCiAgICAgICAgICAgICAgICAgICAgImEtZm9ybS1pdGVtIiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogIui0n+i0o+mDqOmXqCIsCiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsQ29sOiBfdm0ubGFiZWxDb2wsCiAgICAgICAgICAgICAgICAgICAgICAgIHdyYXBwZXJDb2w6IF92bS53cmFwcGVyQ29sCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgImEtc2VsZWN0IiwKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IHdpZHRoOiAiMTAwJSIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZTogIm11bHRpcGxlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAi6K+36YCJ5oup6LSf6LSj6YOo6ZeoIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbkZpbHRlclByb3A6ICJjaGlsZHJlbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRQb3B1cENvbnRhaW5lcjogZnVuY3Rpb24odGFyZ2V0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQucGFyZW50Tm9kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duU3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4SGVpZ2h0OiAiMjAwcHgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdzogImF1dG8iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbDogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5kZXBhcnRJZHMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24oJCR2KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5kZXBhcnRJZHMgPSAkJHYKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiZGVwYXJ0SWRzIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9sKF92bS5yZXN1bHREZXBhcnRPcHRpb25zLCBmdW5jdGlvbihpdGVtKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImEtc2VsZWN0LW9wdGlvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IGtleTogaXRlbS5rZXksIGF0dHJzOiB7IHZhbHVlOiBpdGVtLmtleSB9IH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KF92bS5fcyhpdGVtLnRpdGxlKSldCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImEtZm9ybS1pdGVtIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBsYWJlbDogIuWktOWDjyIsCiAgICAgICAgICAgICAgICAgICAgbGFiZWxDb2w6IF92bS5sYWJlbENvbCwKICAgICAgICAgICAgICAgICAgICB3cmFwcGVyQ29sOiBfdm0ud3JhcHBlckNvbAogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiai1pbWFnZS11cGxvYWQiLCB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJhdmF0YXItdXBsb2FkZXIiLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHRleHQ6ICLkuIrkvKAiIH0sCiAgICAgICAgICAgICAgICAgICAgbW9kZWw6IHsKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uZmlsZUxpc3QsCiAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24oJCR2KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5maWxlTGlzdCA9ICQkdgogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJmaWxlTGlzdCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYS1mb3JtLWl0ZW0iLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIGxhYmVsOiAi55Sf5pelIiwKICAgICAgICAgICAgICAgICAgICBsYWJlbENvbDogX3ZtLmxhYmVsQ29sLAogICAgICAgICAgICAgICAgICAgIHdyYXBwZXJDb2w6IF92bS53cmFwcGVyQ29sCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJhLWRhdGUtcGlja2VyIiwgewogICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogImRlY29yYXRvciIsCiAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWRlY29yYXRvciIsCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgImJpcnRoZGF5IiwKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsVmFsdWU6ICFfdm0ubW9kZWwuYmlydGhkYXkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBudWxsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogX3ZtLm1vbWVudChfdm0ubW9kZWwuYmlydGhkYXksIF92bS5kYXRlRm9ybWF0KQogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjoKICAgICAgICAgICAgICAgICAgICAgICAgICAiWydiaXJ0aGRheScsIHtpbml0aWFsVmFsdWU6IW1vZGVsLmJpcnRoZGF5P251bGw6bW9tZW50KG1vZGVsLmJpcnRoZGF5LGRhdGVGb3JtYXQpfV0iCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyB3aWR0aDogIjEwMCUiIH0sCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAi6K+36YCJ5oup55Sf5pelIiwKICAgICAgICAgICAgICAgICAgICAgIGdldENhbGVuZGFyQ29udGFpbmVyOiBmdW5jdGlvbihub2RlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBub2RlLnBhcmVudE5vZGUKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYS1mb3JtLWl0ZW0iLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIGxhYmVsOiAi5oCn5YirIiwKICAgICAgICAgICAgICAgICAgICBsYWJlbENvbDogX3ZtLmxhYmVsQ29sLAogICAgICAgICAgICAgICAgICAgIHdyYXBwZXJDb2w6IF92bS53cmFwcGVyQ29sCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJhLXNlbGVjdCIsCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogImRlY29yYXRvciIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtZGVjb3JhdG9yIiwKICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogWyJzZXgiLCB7fV0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIlsgJ3NleCcsIHt9XSIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAi6K+36YCJ5oup5oCn5YirIiwKICAgICAgICAgICAgICAgICAgICAgICAgZ2V0UG9wdXBDb250YWluZXI6IGZ1bmN0aW9uKHRhcmdldCkgewogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQucGFyZW50Tm9kZQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiYS1zZWxlY3Qtb3B0aW9uIiwgeyBhdHRyczogeyB2YWx1ZTogMSB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCLnlLciKQogICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICBfYygiYS1zZWxlY3Qtb3B0aW9uIiwgeyBhdHRyczogeyB2YWx1ZTogMiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCLlpbMiKQogICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImEtZm9ybS1pdGVtIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBsYWJlbDogIumCrueusSIsCiAgICAgICAgICAgICAgICAgICAgbGFiZWxDb2w6IF92bS5sYWJlbENvbCwKICAgICAgICAgICAgICAgICAgICB3cmFwcGVyQ29sOiBfdm0ud3JhcHBlckNvbAogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiYS1pbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJkZWNvcmF0b3IiLAogICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1kZWNvcmF0b3IiLAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogWyJlbWFpbCIsIF92bS52YWxpZGF0b3JSdWxlcy5lbWFpbF0sCiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJbICdlbWFpbCcsIHZhbGlkYXRvclJ1bGVzLmVtYWlsXSIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHBsYWNlaG9sZGVyOiAi6K+36L6T5YWl6YKu566xIiB9CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYS1mb3JtLWl0ZW0iLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIGxhYmVsOiAi5omL5py65Y+356CBIiwKICAgICAgICAgICAgICAgICAgICBsYWJlbENvbDogX3ZtLmxhYmVsQ29sLAogICAgICAgICAgICAgICAgICAgIHdyYXBwZXJDb2w6IF92bS53cmFwcGVyQ29sCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJhLWlucHV0IiwgewogICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogImRlY29yYXRvciIsCiAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWRlY29yYXRvciIsCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBbInBob25lIiwgX3ZtLnZhbGlkYXRvclJ1bGVzLnBob25lXSwKICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIlsgJ3Bob25lJywgdmFsaWRhdG9yUnVsZXMucGhvbmVdIgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAi6K+36L6T5YWl5omL5py65Y+356CBIiwKICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiBfdm0uaXNEaXNhYmxlZEF1dGgoInVzZXI6Zm9ybTpwaG9uZSIpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImEtZm9ybS1pdGVtIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBsYWJlbDogIuW6p+acuiIsCiAgICAgICAgICAgICAgICAgICAgbGFiZWxDb2w6IF92bS5sYWJlbENvbCwKICAgICAgICAgICAgICAgICAgICB3cmFwcGVyQ29sOiBfdm0ud3JhcHBlckNvbAogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiYS1pbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJkZWNvcmF0b3IiLAogICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1kZWNvcmF0b3IiLAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogWyJ0ZWxlcGhvbmUiLCBfdm0udmFsaWRhdG9yUnVsZXMudGVsZXBob25lXSwKICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIlsgJ3RlbGVwaG9uZScsIHZhbGlkYXRvclJ1bGVzLnRlbGVwaG9uZV0iCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBwbGFjZWhvbGRlcjogIuivt+i+k+WFpeW6p+acuiIgfQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImEtZm9ybS1pdGVtIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBsYWJlbDogIuW3peS9nOa1geW8leaTjiIsCiAgICAgICAgICAgICAgICAgICAgbGFiZWxDb2w6IF92bS5sYWJlbENvbCwKICAgICAgICAgICAgICAgICAgICB3cmFwcGVyQ29sOiBfdm0ud3JhcHBlckNvbAogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiai1kaWN0LXNlbGVjdC10YWciLCB7CiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAiZGVjb3JhdG9yIiwKICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtZGVjb3JhdG9yIiwKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IFsiYWN0aXZpdGlTeW5jIiwge31dLAogICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiWydhY3Rpdml0aVN5bmMnLCB7fV0iCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICLor7fpgInmi6nmmK/lkKblkIzmraXlt6XkvZzmtYHlvJXmk44iLAogICAgICAgICAgICAgICAgICAgICAgdHlwZTogInJhZGlvIiwKICAgICAgICAgICAgICAgICAgICAgIHRyaWdnZXJDaGFuZ2U6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgICBkaWN0Q29kZTogImFjdGl2aXRpX3N5bmMiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDIKICAgICAgICAgICkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX2MoImRlcGFydC13aW5kb3ciLCB7IHJlZjogImRlcGFydFdpbmRvdyIsIG9uOiB7IG9rOiBfdm0ubW9kYWxGb3JtT2sgfSB9KSwKICAgICAgX2MoCiAgICAgICAgImRpdiIsCiAgICAgICAgewogICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgIHZhbHVlOiAhX3ZtLmRpc2FibGVTdWJtaXQsCiAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIiFkaXNhYmxlU3VibWl0IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgc3RhdGljQ2xhc3M6ICJkcmF3ZXItYm9vdG9tLWJ1dHRvbiIKICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYS1wb3Bjb25maXJtIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICB0aXRsZTogIuehruWumuaUvuW8g+e8lui+ke+8nyIsCiAgICAgICAgICAgICAgICBva1RleHQ6ICLnoa7lrpoiLAogICAgICAgICAgICAgICAgY2FuY2VsVGV4dDogIuWPlua2iCIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIG9uOiB7IGNvbmZpcm06IF92bS5oYW5kbGVDYW5jZWwgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoImEtYnV0dG9uIiwgeyBzdGF0aWNTdHlsZTogeyAibWFyZ2luLXJpZ2h0IjogIi44cmVtIiB9IH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigi5Y+W5raIIikKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhLWJ1dHRvbiIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiAicHJpbWFyeSIsIGxvYWRpbmc6IF92bS5jb25maXJtTG9hZGluZyB9LAogICAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0uaGFuZGxlU3VibWl0IH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigi5o+Q5LqkIildCiAgICAgICAgICApCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICkKICAgIF0sCiAgICAyCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}