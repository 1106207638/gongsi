{"remainingRequest":"D:\\vue\\node_modules\\babel-loader\\lib\\index.js!D:\\vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\vue\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\vue\\src\\views\\system\\modules\\SysCheckRuleModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\vue\\src\\views\\system\\modules\\SysCheckRuleModal.vue","mtime":1615948821511},{"path":"D:\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1615952641464},{"path":"D:\\vue\\node_modules\\babel-loader\\lib\\index.js","mtime":1615952610415},{"path":"D:\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1615952641464},{"path":"D:\\vue\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1615952643260}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["SysCheckRuleModal.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <a-modal\r\n    :title=\"title\"\r\n    :width=\"1000\"\r\n    :visible=\"visible\"\r\n    :confirmLoading=\"confirmLoading\"\r\n    @ok=\"handleOk\"\r\n    @cancel=\"handleCancel\"\r\n    cancelText=\"关闭\">\r\n\r\n    <a-spin :spinning=\"confirmLoading\">\r\n      <a-form :form=\"form\">\r\n\r\n        <a-form-item\r\n          :labelCol=\"labelCol\"\r\n          :wrapperCol=\"wrapperCol\"\r\n          label=\"规则名称\">\r\n          <a-input placeholder=\"请输入规则名称\" v-decorator=\"['ruleName', validatorRules.ruleName]\"/>\r\n        </a-form-item>\r\n        <a-form-item\r\n          :labelCol=\"labelCol\"\r\n          :wrapperCol=\"wrapperCol\"\r\n          label=\"规则Code\">\r\n          <a-input placeholder=\"请输入规则Code\" v-decorator=\"['ruleCode', validatorRules.ruleCode]\"/>\r\n        </a-form-item>\r\n        <a-form-item\r\n          :labelCol=\"labelCol\"\r\n          :wrapperCol=\"wrapperCol\"\r\n          label=\"规则描述\">\r\n          <a-textarea placeholder=\"请输入规则描述\" v-decorator=\"['ruleDescription', {}]\"/>\r\n        </a-form-item>\r\n\r\n      </a-form>\r\n      <!-- 规则设计 -->\r\n      <a-tabs v-model=\"tabs.activeKey\">\r\n        <a-tab-pane tab=\"局部规则\" :key=\"tabs.design.key\" forceRender>\r\n          <a-alert type=\"info\" showIcon message=\"局部规则按照你输入的位数有序的校验。\"/>\r\n          <j-editable-table\r\n            ref=\"designTable\"\r\n            dragSort\r\n            rowNumber\r\n            :maxHeight=\"240\"\r\n            :columns=\"tabs.design.columns\"\r\n            :dataSource=\"tabs.design.dataSource\"\r\n            style=\"margin-top: 8px;\"\r\n          >\r\n\r\n            <template #action=\"props\">\r\n              <my-action-button :rowEvent=\"props\"/>\r\n            </template>\r\n\r\n          </j-editable-table>\r\n        </a-tab-pane>\r\n        <a-tab-pane tab=\"全局规则\" :key=\"tabs.global.key\" forceRender>\r\n          <j-editable-table\r\n            ref=\"globalTable\"\r\n            dragSort\r\n            rowNumber\r\n            actionButton\r\n            :maxHeight=\"240\"\r\n            :columns=\"tabs.global.columns\"\r\n            :dataSource=\"tabs.global.dataSource\"\r\n          >\r\n\r\n            <template #actionButtonAfter>\r\n              <a-alert type=\"info\" showIcon message=\"全局规则可校验用户输入的所有字符；全局规则的优先级比局部规则的要高。\" style=\"margin-bottom: 8px;\"/>\r\n            </template>\r\n\r\n            <template #action=\"props\">\r\n              <my-action-button :rowEvent=\"props\" allowEmpty/>\r\n            </template>\r\n\r\n          </j-editable-table>\r\n        </a-tab-pane>\r\n      </a-tabs>\r\n    </a-spin>\r\n  </a-modal>\r\n</template>\r\n\r\n<script>\r\n  import pick from 'lodash.pick'\r\n  import { httpAction } from '@/api/manage'\r\n  import { validateDuplicateValue, alwaysResolve, failedSymbol } from '@/utils/util'\r\n  import { FormTypes } from '@/utils/JEditableTableUtil'\r\n  import JEditableTable from '@comp/jeecg/JEditableTable'\r\n\r\n  export default {\r\n    name: 'SysCheckRuleModal',\r\n    components: {\r\n      JEditableTable,\r\n      'my-action-button': {\r\n        props: { rowEvent: Object, allowEmpty: Boolean },\r\n        methods: {\r\n          confirmIsShow() {\r\n            const { index, allValues: { inputValues } } = this.rowEvent\r\n            let value = inputValues[index]\r\n            return value.digits || value.pattern\r\n          },\r\n          handleLineAdd() {\r\n            const { target } = this.rowEvent\r\n            target.add()\r\n          },\r\n          handleLineDelete() {\r\n            const { rowId, target } = this.rowEvent\r\n            target.removeRows(rowId)\r\n          },\r\n          renderDeleteButton() {\r\n            if (this.allowEmpty || this.rowEvent.index > 0) {\r\n              if (this.confirmIsShow()) {\r\n                return (\r\n                  <a-popconfirm title=\"确定要删除吗？\" onConfirm={this.handleLineDelete}>\r\n                    <a-button icon=\"minus\"/>\r\n                  </a-popconfirm>\r\n                )\r\n              } else {\r\n                return (\r\n                  <a-button icon=\"minus\" onClick={this.handleLineDelete}/>\r\n                )\r\n              }\r\n            }\r\n            return ''\r\n          },\r\n        },\r\n        render() {\r\n          return (\r\n            <div>\r\n              <a-button onClick={this.handleLineAdd} icon=\"plus\"/>\r\n              &nbsp;\r\n              {this.renderDeleteButton()}\r\n            </div>\r\n          )\r\n        }\r\n      }\r\n    },\r\n    data() {\r\n      return {\r\n        title: '操作',\r\n        visible: false,\r\n        model: {},\r\n        labelCol: {\r\n          xs: { span: 24 },\r\n          sm: { span: 5 },\r\n        },\r\n        wrapperCol: {\r\n          xs: { span: 24 },\r\n          sm: { span: 16 },\r\n        },\r\n        confirmLoading: false,\r\n        form: this.$form.createForm(this),\r\n        validatorRules: {\r\n          ruleName: { rules: [{ required: true, message: '请输入规则名称!' },] },\r\n          ruleCode: {\r\n            rules: [\r\n              { required: true, message: '请输入规则Code!' },\r\n              { validator: (rule, value, callback) => validateDuplicateValue('sys_check_rule', 'rule_code', value, this.model.id, callback) }\r\n            ]\r\n          },\r\n        },\r\n        tabs: {\r\n          activeKey: 'design',\r\n          global: {\r\n            key: 'global',\r\n            columns: [\r\n              {\r\n                title: '优先级',\r\n                key: 'priority',\r\n                width: '15%',\r\n                type: FormTypes.select,\r\n                defaultValue: '1',\r\n                options: [\r\n                  { title: '优先运行', value: '1' },\r\n                  { title: '最后运行', value: '0' },\r\n                ],\r\n                validateRules: []\r\n              },\r\n              {\r\n                title: '规则（正则表达式）',\r\n                key: 'pattern',\r\n                width: '50%',\r\n                type: FormTypes.input,\r\n                validateRules: [\r\n                  { required: true, message: '规则不能为空' },\r\n                  { handler: this.validatePatternHandler },\r\n                ]\r\n              },\r\n              {\r\n                title: '提示文本',\r\n                key: 'message',\r\n                width: '20%',\r\n                type: FormTypes.input,\r\n                validateRules: [\r\n                  { required: true, message: '${title}不能为空' },\r\n                ]\r\n              },\r\n              {\r\n                title: '操作',\r\n                key: 'action',\r\n                width: '15%',\r\n                slotName: 'action',\r\n                type: FormTypes.slot\r\n              }\r\n            ],\r\n            dataSource: [],\r\n          },\r\n          design: {\r\n            key: 'design',\r\n            columns: [\r\n              {\r\n                title: '位数',\r\n                key: 'digits',\r\n                width: '15%',\r\n                type: FormTypes.inputNumber,\r\n                validateRules: [\r\n                  { required: true, message: '${title}不能为空' },\r\n                  { pattern: /^[1-9]\\d*$/, message: '请输入零以上的正整数' },\r\n                ]\r\n              },\r\n              {\r\n                title: '规则（正则表达式）',\r\n                key: 'pattern',\r\n                width: '50%',\r\n                type: FormTypes.input,\r\n                validateRules: [\r\n                  { required: true, message: '规则不能为空' },\r\n                  { handler: this.validatePatternHandler }\r\n                ]\r\n              },\r\n              {\r\n                title: '提示文本',\r\n                key: 'message',\r\n                width: '20%',\r\n                type: FormTypes.input,\r\n                validateRules: [\r\n                  { required: true, message: '${title}不能为空' },\r\n                ]\r\n              },\r\n              {\r\n                title: '操作',\r\n                key: 'action',\r\n                width: '15%',\r\n                slotName: 'action',\r\n                type: FormTypes.slot\r\n              },\r\n            ],\r\n            dataSource: [],\r\n          }\r\n        },\r\n        url: {\r\n          add: '/sys/checkRule/add',\r\n          edit: '/sys/checkRule/edit',\r\n        },\r\n      }\r\n    },\r\n    created() {\r\n    },\r\n    methods: {\r\n\r\n      validatePatternHandler(type, value, row, column, callback, target) {\r\n        if (type === 'blur' || type === 'getValues') {\r\n          try {\r\n            new RegExp(value)\r\n            callback(true)\r\n          } catch (e) {\r\n            callback(false, '请输入正确的正则表达式')\r\n          }\r\n        } else {\r\n          callback(true) // 不填写或者填写 null 代表不进行任何操作\r\n        }\r\n      },\r\n\r\n      add() {\r\n        this.edit({})\r\n      },\r\n      edit(record) {\r\n        this.form.resetFields()\r\n        this.tabs.activeKey = this.tabs.design.key\r\n        this.tabs.global.dataSource = []\r\n        this.tabs.design.dataSource = [{ digits: '', pattern: '', message: '' }]\r\n        this.model = Object.assign({}, record)\r\n        this.visible = true\r\n        this.$nextTick(() => {\r\n          this.form.setFieldsValue(pick(this.model, 'ruleName', 'ruleCode', 'ruleDescription'))\r\n          // 子表数据\r\n          let ruleJson = this.model.ruleJson\r\n          if (ruleJson) {\r\n            let ruleList = JSON.parse(ruleJson)\r\n            // 筛选出全局规则和局部规则\r\n            let global = [], design = [], priority = '1'\r\n            ruleList.forEach(rule => {\r\n              if (rule.digits === '*') {\r\n                global.push(Object.assign(rule, { priority }))\r\n              } else {\r\n                priority = '0'\r\n                design.push(rule)\r\n              }\r\n            })\r\n            this.tabs.global.dataSource = global\r\n            this.tabs.design.dataSource = design\r\n          }\r\n        })\r\n      },\r\n      close() {\r\n        this.$emit('close')\r\n        this.visible = false\r\n      },\r\n      handleOk() {\r\n        Promise.all([\r\n          // 主表单校验\r\n          alwaysResolve(new Promise((resolve, reject) => {\r\n            this.form.validateFields((error, values) => error ? reject(error) : resolve(values))\r\n          })),\r\n          // 局部规则子表校验\r\n          alwaysResolve(this.$refs.designTable.getValuesPromise),\r\n          // 全局规则子表校验\r\n          alwaysResolve(this.$refs.globalTable.getValuesPromise),\r\n        ]).then(results => {\r\n          let [mainResult, designResult, globalResult] = results\r\n\r\n          if (mainResult.type === failedSymbol) {\r\n            return Promise.reject('主表校验未通过')\r\n          } else if (designResult.type === failedSymbol) {\r\n            this.tabs.activeKey = this.tabs.design.key\r\n            return Promise.reject('局部规则子表校验未通过')\r\n          } else if (globalResult.type === failedSymbol) {\r\n            this.tabs.activeKey = this.tabs.global.key\r\n            return Promise.reject('全局规则子表校验未通过')\r\n          } else {\r\n            // 所有校验已通过，这一步是整合数据\r\n            let mainValues = mainResult.data, globalValues = globalResult.data, designValues = designResult.data\r\n\r\n            // 整合两个子表的数据\r\n            let firstGlobal = [], afterGlobal = []\r\n            globalValues.forEach(v => {\r\n              v.digits = '*'\r\n              if (v.priority === '1') {\r\n                firstGlobal.push(v)\r\n              } else {\r\n                afterGlobal.push(v)\r\n              }\r\n            })\r\n            let concatValues = firstGlobal.concat(designValues).concat(afterGlobal)\r\n            let subValues = concatValues.map(i => pick(i, 'digits', 'pattern', 'message'))\r\n\r\n            // 生成 formData，用于传入后台\r\n            let ruleJson = JSON.stringify(subValues)\r\n            let formData = Object.assign(this.model, mainValues, { ruleJson })\r\n\r\n            // 判断请求方式和请求地址，并发送请求\r\n            let method = 'post', httpUrl = this.url.add\r\n            if (this.model.id) {\r\n              method = 'put'\r\n              httpUrl = this.url.edit\r\n            }\r\n            this.confirmLoading = true\r\n            return httpAction(httpUrl, formData, method)\r\n          }\r\n        }).then((res) => {\r\n          if (res.success) {\r\n            this.$message.success(res.message)\r\n            this.$emit('ok')\r\n            this.close()\r\n          } else {\r\n            this.$message.warning(res.message)\r\n          }\r\n        }).catch(e => {\r\n          console.error(e)\r\n        }).finally(() => {\r\n          this.confirmLoading = false\r\n        })\r\n      },\r\n      handleCancel() {\r\n        this.close()\r\n      },\r\n\r\n    }\r\n  }\r\n</script>\r\n\r\n<style lang=\"less\" scoped></style>"],"sourceRoot":"src/views/system/modules"}]}