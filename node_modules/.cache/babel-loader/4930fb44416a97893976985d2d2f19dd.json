{"remainingRequest":"D:\\vue\\node_modules\\babel-loader\\lib\\index.js!D:\\vue\\src\\components\\dict\\JDictSelectUtil.js","dependencies":[{"path":"D:\\vue\\src\\components\\dict\\JDictSelectUtil.js","mtime":1615948814055},{"path":"D:\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1615952641464},{"path":"D:\\vue\\node_modules\\babel-loader\\lib\\index.js","mtime":1615952610415}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["D:/vue/src/components/dict/JDictSelectUtil.js"],"names":["ajaxGetDictItems","getDictItemsFromCache","getAction","initDictOptions","dictCode","res","result","success","filterDictText","dictOptions","text","Array","isArray","splitText","toString","trim","split","txt","dictText","dictItem","value","title","label","push","join","filterMultiDictText","length","re","arr","forEach","option","i","substring","filterDictTextByCache","key","item","filter","t","getDictItems","params","desformDictItems","map","then","console","log","Promise","resolve","error","catch"],"mappings":"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","sourcesContent":["/**\r\n * 字典 util\r\n * author: scott\r\n * date: 20190109\r\n */\r\n\r\nimport {ajaxGetDictItems,getDictItemsFromCache} from '@/api/api'\r\nimport {getAction} from '@/api/manage'\r\n\r\n/**\r\n * 获取字典数组\r\n * @param dictCode 字典Code\r\n * @return List<Map>\r\n */\r\nexport async function initDictOptions(dictCode) {\r\n  if (!dictCode) {\r\n    return '字典Code不能为空!';\r\n  }\r\n  //优先从缓存中读取字典配置\r\n  if(getDictItemsFromCache(dictCode)){\r\n    let res = {}\r\n    res.result = getDictItemsFromCache(dictCode);\r\n    res.success = true;\r\n    return res;\r\n  }\r\n  //获取字典数组\r\n  let res = await ajaxGetDictItems(dictCode);\r\n  return res;\r\n}\r\n\r\n/**\r\n * 字典值替换文本通用方法\r\n * @param dictOptions  字典数组\r\n * @param text  字典值\r\n * @return String\r\n */\r\nexport function filterDictText(dictOptions, text) {\r\n  // --update-begin----author:sunjianlei---date:20200323------for: 字典翻译 text 允许逗号分隔 ---\r\n  if (text != null && Array.isArray(dictOptions)) {\r\n    let result = []\r\n    // 允许多个逗号分隔，允许传数组对象\r\n    let splitText\r\n    if (Array.isArray(text)) {\r\n      splitText = text\r\n    } else {\r\n      splitText = text.toString().trim().split(',')\r\n    }\r\n    for (let txt of splitText) {\r\n      let dictText = txt\r\n      for (let dictItem of dictOptions) {\r\n        if (txt.toString() === dictItem.value.toString()) {\r\n          dictText = (dictItem.text || dictItem.title || dictItem.label)\r\n          break\r\n        }\r\n      }\r\n      result.push(dictText)\r\n    }\r\n    return result.join(',')\r\n  }\r\n  return text\r\n  // --update-end----author:sunjianlei---date:20200323------for: 字典翻译 text 允许逗号分隔 ---\r\n}\r\n\r\n/**\r\n * 字典值替换文本通用方法(多选)\r\n * @param dictOptions  字典数组\r\n * @param text  字典值\r\n * @return String\r\n */\r\nexport function filterMultiDictText(dictOptions, text) {\r\n  //js “!text” 认为0为空，所以做提前处理\r\n  if(text === 0 || text === '0'){\r\n    if(dictOptions){\r\n      for (let dictItem of dictOptions) {\r\n        if (text == dictItem.value) {\r\n          return dictItem.text\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if(!text || text=='null' || !dictOptions || dictOptions.length==0){\r\n    return \"\"\r\n  }\r\n  let re = \"\";\r\n  text = text.toString()\r\n  let arr = text.split(\",\")\r\n  dictOptions.forEach(function (option) {\r\n    if(option){\r\n      for(let i=0;i<arr.length;i++){\r\n        if (arr[i] === option.value) {\r\n          re += option.text+\",\";\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  });\r\n  if(re==\"\"){\r\n    return text;\r\n  }\r\n  return re.substring(0,re.length-1);\r\n}\r\n\r\n/**\r\n * 翻译字段值对应的文本\r\n * @param children\r\n * @returns string\r\n */\r\nexport function filterDictTextByCache(dictCode, key) {\r\n  if(key==null ||key.length==0){\r\n    return;\r\n  }\r\n  if (!dictCode) {\r\n    return '字典Code不能为空!';\r\n  }\r\n   //优先从缓存中读取字典配置\r\n  if(getDictItemsFromCache(dictCode)){\r\n    let item = getDictItemsFromCache(dictCode).filter(t => t[\"value\"] == key)\r\n    if(item && item.length>0){\r\n      return item[0][\"text\"]\r\n    }\r\n  }\r\n}\r\n\r\n/** 通过code获取字典数组 */\r\nexport async function getDictItems(dictCode, params) {\r\n    //优先从缓存中读取字典配置\r\n    if(getDictItemsFromCache(dictCode)){\r\n      let desformDictItems = getDictItemsFromCache(dictCode).map(item => ({...item, label: item.text}))\r\n      return desformDictItems;\r\n    }\r\n\r\n    //缓存中没有，就请求后台\r\n    return await ajaxGetDictItems(dictCode, params).then(({success, result}) => {\r\n      if (success) {\r\n        let res = result.map(item => ({...item, label: item.text}))\r\n        console.log('------- 从DB中获取到了字典-------dictCode : ', dictCode, res)\r\n        return Promise.resolve(res)\r\n      } else {\r\n        console.error('getDictItems error: : ', res)\r\n        return Promise.resolve([])\r\n      }\r\n    }).catch((res) => {\r\n      console.error('getDictItems error: ', res)\r\n      return Promise.resolve([])\r\n    })\r\n}"]}]}